1.  워크스페이스를 초기화할 때 유연성을 위해 'none' 스택을 선택하세요.
2.  코드베이스는 배포 가능한 단위를 위한 `apps/` 디렉토리와 공유 코드 라이브러리를 위한 `libs/` 디렉토리로 구성하세요.
3.  전역 종속성 및 Nx 동작을 위해 `nx.json` 및 `package.json` 파일이 루트에 올바르게 구성되어 있는지 확인하세요.
4.  `npx nx graph` 명령어를 사용해서 프로젝트 간의 관계를 시각화하고 종속성을 파악하세요.
5.  모든 Nx 플러그인이 동일한 버전을 사용하도록 유지해서 호환성 문제를 막고 디버깅을 간소화하세요.
6.  최신 기능, 성능 개선, 버그 수정을 활용하기 위해 Nx 버전을 정기적으로 검토하고 업데이트하세요.
7.  환경 변수를 파일 기반 구성, 사용자 정의 `.env` 파일, 또는 임시 정의를 사용해서 Nx 프로젝트에서 설정하고 사용하는 방법을 익히세요.
8.  Nx 실행기가 필요한 자산을 출력 번들에 포함하고 복사하도록 구성하세요.
9.  `scope-type-identifier` 같은 표준 명명 규칙(예: `products-feature-details`, `shared-ui-forms`)을 프로젝트 및 디렉토리에 적용하세요.
10. 깊게 중첩된 구조를 피하고, 2~3개 계층 이하로 유지하는 게 좋습니다.
11. `nx graph` 명령어를 사용해서 폴더 간의 종속성을 분석하고 시각화하세요.
12. `libs/` 디렉토리 내에 애플리케이션 로직을 "로컬 라이브러리"로 분리하세요.
13. `nx.json` 또는 린트 규칙을 사용해서 모노레포 내에서 프로젝트가 서로 종속되는 방식에 대한 규칙을 정의하고 적용하세요.
14. Nx Cloud를 통한 원격 캐싱을 활용해서 팀과 CI 전반에 걸쳐 캐시를 공유하세요.
15. `nx affected` 명령어를 사용해서 변경 사항의 영향을 받는 프로젝트만 처리해서 빌드 시간을 최적화하세요.
16. 작업을 실행하기 전에 `nx affected:graph`를 사용해서 영향을 받는 프로젝트를 시각화하는 게 좋습니다.
17. `nx sync` 명령어를 사용해서 TypeScript 프로젝트 참조를 자동으로 동기화하세요.
18. `watch-deps` 대상을 활용해서 빌드 가능한 라이브러리의 변경 사항이 자동으로 반영되도록 하세요.
19. GitHub Actions와 같은 CI/CD 시스템에서 `nx affected` 변경 사항을 기반으로 동적 JSON 매트릭스를 생성해서 필요한 빌드 및 배포만 트리거되도록 하세요.
20. Docker 관련 로직(예: `docker-push`, `docker-build`)을 각 애플리케이션의 `project.json` 파일 안에 캡슐화하세요.
21. Nx Cloud의 원격 캐시(`Nx Replay`)가 불변성을 보장하고 안전하다는 점을 인지하세요.
22. 토큰을 통한 접근 제어를 통해 CI 파이프라인에 대한 캐시 쓰기 접근을 제한하고 개발자는 읽기만 가능하도록 하세요.
23. Nx Cloud의 종단 간 암호화 기능을 활용해서 작업 아티팩트를 전송 및 저장 중 보호하세요.
24. Nx Cloud가 SOC Type 1 및 Type 2 인증을 받았다는 점을 활용해서 데이터 처리 및 보안 관행에 대한 추가 보증을 받으세요.
25. `Nx Agents`를 사용해서 여러 머신에 작업을 분산하고 필요한 아티팩트가 원활하게 전송되도록 하세요.
26. Nx 생성기를 사용해서 컴포넌트, 기능 또는 전체 프로젝트를 스캐폴딩하는 반복적인 작업을 자동화하세요.
27. `nx add @nx/plugin` 및 `nx generate @nx/plugin:generator`를 사용해서 워크스페이스 내에서 사용자 정의 생성기를 만드세요.
28. 복잡한 파일 수정을 위해서는 `@phenomnomnominal/tsquery` 같은 도구와 함께 추상 구문 트리(AST)를 활용해서 정확한 변경을 보장하세요.
29. 실행기를 사용해서 개발, 빌드, 배포 작업에 대한 스크립트를 표준화하세요.
30. `preTasksExecution` 및 `postTasksExecution`에 연결해서 작업 실행 전후에 사용자 정의 로직을 실행하세요.
31. React 개발을 위해 Nx의 TypeScript 프로젝트 참조 구성을 활용하고 모노레포 내에서 원활한 통합을 보장하세요.
32. Angular 앱의 경우, 기능을 비즈니스 도메인별로 구성하고 독립형 컴포넌트로 전환해서 복잡성을 줄이세요.
33. NestJS 마이크로서비스를 위해서는 DTO, 저장소, 도메인 모델을 전용 `domain` 라이브러리에 보관하세요.
34. Node.js 백엔드 배포를 위해 Nx의 향상된 Docker 지원 및 록파일 가지치기를 포함한 내장 기능을 활용하세요.
35. `nx release`를 통해 백엔드 앱 배포를 탐색하는 것도 고려하세요.
36. Next.js를 Nx와 함께 설정할 때는 `@nx/next` 및 `@nx/react` 같은 필요한 플러그인을 설치하세요.
37. Nx 생성기를 사용해서 Next.js 앱 및 React 컴포넌트 라이브러리를 만드세요.
38. Tailwind CSS 및 Shadcn UI를 Nx 워크스페이스 내에 구성하는 상세 설정 단계를 따르세요.
39. UI 컴포넌트를 격리하여 개발하고 상호 작용 테스트를 위해 Storybook을 사용하세요.
40. Jest 및 Playwright를 기반으로 하는 Storybook의 테스트 러너를 활용해서 상호 작용 테스트를 자동화하세요.
41. Cypress를 사용해서 사용자 관점에서 종단 간 UI 테스트를 하세요.
42. "모듈을 찾을 수 없습니다" 같은 일반적인 가져오기 해결 문제는 `tsconfig.base.json`의 잘못된 경로 별칭에서 비롯되는 경우가 많으니 확인하세요.
43. 예상치 못한 동작이나 오류가 발생하면 `nx reset` 또는 `rm -rf node_modules dist .nx/cache` 후 `npm install` 및 `nx build <project-name>`을 실행해서 캐싱 문제를 해결하세요.
44. `tsconfig.app.json` 또는 `tsconfig.lib.json`에서 올바른 `include` 및 `exclude` 배열을 확인해서 테스트 파일이 프로덕션 빌드에 포함되지 않도록 하세요.
45. 이상한 문제를 막기 위해 워크스페이스 전반에 걸쳐 일관된 TypeScript 버전을 사용하세요.
46. Nx는 프로젝트 간의 순환 종속성을 감지하는 데 도움이 되지만, 이를 피하기 위해 기본 코드 구조를 수정하는 것이 가장 좋습니다.
47. `WebStorm` 같은 IDE가 대규모 Nx 모노레포에서 속도 저하를 겪는다면, 루트 `tsconfig.json`이 모든 프로젝트를 올바르게 참조하는지 확인하세요.
48. 디버깅 기술로는 IDE의 디버깅 기능을 활용해서 중단점을 설정하고 변수를 확인하는 게 좋습니다.
49. `nx run-many`를 사용해서 여러 프로젝트에서 명령어를 실행해서 문제에 대한 포괄적인 평가를 수행하세요.
50. Nx의 로컬 캐시를 네트워크 드라이브에 공유하는 건 캐시 오염 같은 보안 위험을 초래할 수 있으니 피하세요. `Nx Cloud`의 원격 캐시(`Nx Replay`)는 안전한 공유를 위해 설계됐습니다.