1.  Hono의 가벼운 특성을 활용해 앱의 콜드 스타트 시간을 최소화하세요. `hono/tiny` 프리셋은 12KB도 안 되고 의존성이 없어서 빠르게 초기화됩니다. 이건 서버리스나 엣지 환경에서 특히 중요한데, 리소스도 덜 써서 운영 비용까지 줄여줘요.
2.  Hono의 멀티 런타임 지원을 적극 활용하세요. Node.js, Deno, Bun, Cloudflare Workers 등 여러 환경에 똑같은 코드를 배포할 수 있죠. 이렇게 하면 아키텍처가 복잡해지는 걸 줄이고 개발 부담도 확 낮출 수 있어요. 하나의 프레임워크로 여러 백엔드 요구사항을 만족시켜서 코드 재사용성도 높일 수 있고요.
3.  다양한 런타임에 맞춰 일관된 개발 및 배포 파이프라인을 만드세요. Hono는 모든 플랫폼에서 똑같이 작동하니까, 환경별로 코드 바꿀 필요 없이 개발 효율성을 최고로 끌어올릴 수 있어요. CI/CD 과정도 단순해지고 예측 가능한 동작을 보장해 줍니다.
4.  엣지 컴퓨팅 환경에 최적화된 Hono의 성능을 적극적으로 써보세요. Hono는 계속해서 처리량을 높이는 것보다는 콜드 스타트 시간과 메모리 사용량을 줄이는 데 중점을 둬요. 덕분에 분산된 엣지 네트워크에서도 한결같은 고성능을 낼 수 있습니다.
5.  Hono의 작은 번들 크기를 활용해서 배포 시간을 단축하고 네트워크 전송량을 줄이세요. 약 13KB로 최소화된 크기는 특히 대역폭이 제한되거나 빠르게 로드되어야 하는 환경에서 유리해요.
6.  Hono의 기본 TypeScript 지원을 활용해서 컴파일 시점에 오류를 미리 잡으세요. 경로 매개변수, 요청 본문, 응답 유형이 강력하게 타입 지정되어 런타임 오류를 줄여줍니다. 이건 코드의 안정성과 유지보수성을 크게 높여줘요.
7.  Zod 같은 유효성 검사 라이브러리와 Hono를 같이 써서 자동 타입 추론의 이점을 누리세요. Hono는 유효성 검사 스키마에서 타입을 자동으로 추론해서 개발 생산성을 높여줍니다. 이걸로 IntelliSense 지원도 강화되고 개발 경험이 더 좋아질 거예요.
8.  타입 안전성을 통해 API 사양을 클라이언트와 공유하고, RPC(원격 프로시저 호출) 모드를 활용하세요. Hono 클라이언트 `hc`를 쓰면 서버 측 API 사양을 타입 안전하게 공유할 수 있어요. 이건 프론트엔드와 백엔드 간의 통합을 간단하게 만들어줍니다.
9.  Hono에 내장된 미들웨어를 활용해서 로깅, CORS, 기본 인증 같은 일반적인 웹 앱 기능을 빠르게 구현하세요. 이건 개발 시간을 줄여주고 표준화된 기능을 쉽게 적용할 수 있게 해줘요.
10. `createMiddleware()` 헬퍼를 사용해서 사용자 정의 미들웨어를 타입 안전하게 만드세요. 이렇게 하면 미들웨어 안에서 컨텍스트 객체의 타입 정의를 그대로 유지하면서 복잡한 로직을 깔끔하게 나눌 수 있어요.
11. Hono의 서드파티 미들웨어 생태계를 둘러보고 GraphQL 서버, Sentry, Firebase Auth 등 필요한 기능에 맞는 걸 통합하세요. 이건 "배터리 포함" 철학을 넓혀서 더 복잡한 앱도 만들 수 있게 해줍니다.
12. Hono의 Context 객체(`c`)를 활용해서 요청 및 응답 객체에 쉽게 접근하세요. 이건 핸들러 로직을 간단하게 만들고 개발자 경험을 향상시켜 불필요한 상용구 코드를 줄여줍니다.
13. Hono의 `RegExpRouter`와 Radix Tree 기반 라우팅으로 고성능 API를 만드세요. 이렇게 최적화된 라우팅 알고리즘은 경로를 빠르게 찾아줘서 앱 응답 속도를 높여줍니다.
14. Hono를 고를 때, 다른 프레임워크(Express, Fastify)랑 비교해서 프로젝트에 가장 잘 맞는지 확인하세요. Hono는 현대적인 클라우드 네이티브 앱에 딱이에요.
15. Hono 성능이 콜드 스타트하고 엣지 환경에 최적화되어 있다는 걸 알아두세요. 높은 처리량이 필요한 백엔드 서비스라면 Fastify 같은 프레임워크가 더 나을 수도 있다는 점도 고려하세요. 각 프레임워크마다 우선하는 성능이 달라요.
16. Hono의 작은 번들 크기(~13KB)를 활용해서 서버리스 함수나 엣지 워커의 콜드 스타트 시간을 최소화하세요. 이건 사용자 경험을 좋게 하고 클라우드 비용도 직접적으로 줄여줍니다.
17. Hono 앱을 배포할 때, 필요한 미들웨어와 어댑터만 묶어서 최적화하세요. Hono는 쓰는 구성 요소만 포함해서 최종 번들 크기를 최소화해요.
18. Hono의 효율적인 초기화 메커니즘을 활용해서 리소스가 제한된 엣지 환경에서도 뛰어난 성능을 확보하세요. 이건 앱이 빠르게 시작하고 응답할 수 있도록 도와줘요.
19. Hono의 `hono/cache` 미들웨어를 활용해서 응답을 효율적으로 캐싱하세요. 이건 반복적인 요청에 대한 처리 부담을 줄이고 응답 시간을 크게 단축시켜 줍니다.
20. 웹 표준 API를 따르는 Hono의 특성을 활용해서 코드의 이식성과 미래 호환성을 확보하세요. 이건 플랫폼에 묶이는 걸 줄여주고 장기적인 유지보수를 쉽게 해줘요.
21. 엣지 환경에서 `hono/cache`를 사용해서 데이터 지역성을 활용하고 네트워크 지연을 줄이세요. 캐싱은 사용자와 가까운 엣지에서 데이터를 제공해서 성능을 최고로 끌어올려 줍니다.
22. Cloudflare Workers에 Hono 앱을 배포할 때는 `c.env`로 환경 변수에 접근하세요. `process.env`는 Cloudflare Workers 환경에서 작동하지 않습니다.
23. `npm create hono@latest` 명령어로 Cloudflare Workers나 Vercel Edge Functions용 Hono 프로젝트 템플릿을 활용하세요. 이건 초기 설정 과정을 간단하게 만들어줘요.
24. Cloudflare Workers에 배포할 때는 `wrangler` CLI 도구를 사용해서 앱을 로컬에서 개발하고 배포하세요. `wrangler.toml` 파일로 설정을 관리할 수 있습니다.
25. Vercel Edge Functions에 Hono를 통합할 때는 Next.js의 App Router나 Pages Router와 함께 `hono/vercel`의 `handle` 함수를 사용하세요. 이때 `export const runtime = 'edge'` 설정을 꼭 넣어줘야 합니다.
26. 로컬 개발 환경에서 Cloudflare Workers용 환경 변수를 `.dev.vars` 파일에 설정해서 관리하세요. 이건 개발과 프로덕션 환경 간의 일관성을 유지하는 데 도움이 됩니다.
27. Hono와 Prisma ORM을 함께 사용해서 엣지 환경에서 데이터베이스 상호작용을 최적화하세요. Prisma Postgres는 내장된 연결 풀링과 제로 콜드 스타트를 제공합니다.
28. Prisma Accelerate를 활성화해서 자체 데이터베이스를 쓰는 경우에도 연결 풀링과 엣지 캐싱의 이점을 누리세요. 이건 서버리스 환경에서 데이터베이스 연결 문제를 줄이는 데 꼭 필요합니다.
29. Cloudflare Workers에서 Prisma ORM을 쓸 때는 Prisma Data Platform 계정을 통해 데이터베이스 스키마를 정의하고 마이그레이션을 진행하세요. `.env` 파일에 `DATABASE_URL`을 설정해야 합니다.
30. `plv8`처럼 Postgres 17에서 더 이상 지원 안 되는 Prisma 확장을 쓰는 경우, Postgres 17으로 업그레이드하기 전에 해당 확장을 없애거나 Edge Functions로 로직을 옮기는 걸 고려하세요.
31. `hono/jwt` 헬퍼를 사용해서 JWT 토큰을 안전하게 만들고, 서명하고, 검증하세요. `exp`, `nbf`, `iat` 같은 페이로드 유효성 검사를 포함해서 토큰의 무결성을 보장해야 합니다.
32. Hono의 `basicAuth` 미들웨어를 활용해서 특정 경로에 기본 인증을 쉽게 적용하세요. `verifyUser` 옵션을 써서 사용자 인증 로직을 직접 만들 수 있습니다.
33. JWT 서명에 쓰는 비밀 키는 안전하게 관리하고 환경 변수나 비밀 관리 시스템을 통해 주입하세요. 코드 안에 직접 넣는 건 절대 피해야 합니다.
34. Hono의 내장 CSRF Protection Middleware를 `app.use(csrf())`로 켜서 CSRF 공격을 막으세요. 이건 Origin 헤더를 검사해서 이상한 요청을 차단합니다.
35. `csrf` 미들웨어의 `origin` 옵션을 사용해서 앱이 허용하는 출처를 명확히 지정하세요. 이건 신뢰할 수 있는 도메인에서만 요청을 허용해서 보안을 강화합니다.
36. `@hono/zod-validator` 미들웨어를 사용해서 Zod 스키마로 요청 데이터의 유효성을 검사하세요. 이건 `form`, `json`, `query`, `header`, `param`, `cookie` 등 여러 입력 유형에 적용할 수 있습니다.
37. 유효성 검사 실패 시 `zValidator`의 콜백 함수를 활용해서 사용자 정의 오류 메시지나 응답을 반환하세요. 이건 사용자에게 명확한 피드백을 제공하고 디버깅을 쉽게 해줍니다.
38. 헤더 유효성 검사 시에는 헤더 이름을 소문자로 사용해야 합니다(예: `idempotency-key` for `Idempotency-Key`). 이건 Hono의 헤더 처리 방식에 맞춰 올바른 값을 가져오기 위함입니다.
39. 사용자 입력 데이터를 출력할 때는 항상 적절한 인코딩(HTML, URL, JavaScript, CSS)을 적용해서 XSS(크로스 사이트 스크립팅) 공격을 막으세요. Hono 자체는 이걸 자동으로 안 해주니까 개발자가 주의해야 합니다.
40. SQL 데이터베이스를 쓸 때는 SQL 인젝션 공격을 막기 위해 항상 매개변수화된 쿼리나 ORM(예: Prisma)을 사용하세요. 사용자 입력을 직접 SQL 쿼리에 넣는 건 피해야 합니다.
41. 큰 Hono 앱을 만들 때는 `app.route()`를 사용해서 엔드포인트를 여러 파일로 나누고 중앙 `index.ts`에서 마운트하세요. 이건 코드 정리하고 유지보수성을 크게 높여줍니다.
42. "Ruby on Rails 같은 컨트롤러"를 직접 만드는 대신, 핸들러를 경로 정의 바로 뒤에 작성해서 타입 추론의 이점을 최대한 활용하세요. 이건 타입 안전성을 높이고 개발 오류를 줄여줍니다.
43. RPC(원격 프로시저 호출) 기능을 쓸 경우, `app.route()`로 분리된 앱 인스턴스를 체인 방식으로 정의해서 올바른 타입 추론을 확보하세요. 이건 클라이언트와 서버 간의 타입 동기화를 쉽게 해줍니다.
44. 미들웨어 실행 순서는 등록 순서에 따라 결정되니까, 중요한 미들웨어(예: 인증, 로깅)는 먼저 등록해서 요청 처리 흐름 초기에 실행되도록 하세요.
45. `hono/factory`의 `createMiddleware()`를 사용해서 커스텀 미들웨어를 정의할 때 Context 객체의 타입 정의를 유지하세요. 이건 미들웨어 안에서 `c.env`나 `c.req`에 대한 타입 안전한 접근을 보장합니다.
46. `c.set()`을 사용해서 미들웨어에서 설정된 변수를 다운스트림 핸들러나 다른 미들웨어에서 타입 안전하게 접근하세요. 이건 요청 처리 과정에서 동적으로 만들어진 데이터를 공유하는 강력한 방법입니다.
47. Hono의 `app.onError()` 콜백을 구현해서 앱 전체의 예외를 한곳에서 처리하세요. 이건 사용자에게 일관된 오류 응답을 제공하고, 오류 로깅을 쉽게 해줍니다.
48. Cloudflare Workers에서 "The script will never generate a response" 오류가 나면, 처리되지 않은 Promise나 닫히지 않은 WebSocket 연결을 확인하세요. 이건 흔히 발생하는 런타임 오류입니다.
49. Cloudflare Workers에서 Hono 앱을 테스트할 때는 `@cloudflare/vitest-pool-workers`를 사용하세요. 이건 Worker 환경에 최적화된 테스트 풀을 제공합니다.
50. Cloudflare Workers에 배포할 환경 변수는 `wrangler.toml` 파일에 정의하거나 Cloudflare 대시보드를 통해 시크릿으로 설정하세요. 로컬 개발용 `.dev.vars`와는 따로 관리해야 합니다.