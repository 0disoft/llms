1.  Tauri의 다중 프로세스 모델을 이해하세요. Tauri 앱은 Rust로 된 핵심 프로세스와 WebView 프로세스로 나뉘어 실행됩니다. 이 구조 덕분에 앱 안정성과 반응성이 좋아져요.
2.  핵심 프로세스를 활용하세요. Rust로 구현된 핵심 프로세스는 운영체제에 접근할 수 있고, 창 관리, 시스템 트레이, 알림, IPC 라우팅을 담당합니다. 중요한 비즈니스 로직과 전역 상태 관리를 여기에 집중시키세요.
3.  WebView의 역할을 알아두세요. WebView 프로세스는 사용자 인터페이스(UI) 렌더링을 맡고 HTML, CSS, JavaScript를 실행합니다. 덕분에 기존 웹 개발 기술을 그대로 쓸 수 있어요.
4.  최소 권한 원칙을 적용하세요. WebView에는 필요한 최소한의 권한만 주고, 민감한 정보나 비밀은 프런트엔드에서 직접 처리하지 마세요. 이렇게 하면 잠재적인 악용의 영향을 줄일 수 있습니다.
5.  Rust의 보안 이점을 활용하세요. Tauri의 핵심은 Rust로 만들어져서 메모리 안전성, 스레드 안전성, 타입 안전성을 보장합니다. 이건 앱 보안을 강화하는 데 큰 도움이 돼요.
6.  플랫폼별 WebView 차이를 고려하세요. Tauri는 시스템 WebView를 사용해서 최종 앱 크기는 작지만, 플랫폼마다 렌더링 차이나 API 제한이 있을 수 있어요. 다양한 운영체제에서 꼭 테스트해보세요.
7.  IPC(프로세스 간 통신)를 통해 안전하게 통신하세요. 프런트엔드와 백엔드 간의 모든 통신은 핵심 프로세스를 거칩니다. 이걸 활용해서 메시지를 중앙에서 제어하고 필터링하세요.
8.  비즈니스 로직을 분리하세요. 공격 가능성을 최소화하려면 가능한 한 많은 비즈니스 로직을 Rust 핵심 프로세스로 넘기는 게 좋습니다.
9.  `create-tauri-app`으로 프로젝트를 만드세요. 새 프로젝트를 시작할 때는 `create-tauri-app` 유틸리티를 써서 공식 템플릿을 활용하세요. 다양한 프런트엔드 프레임워크를 지원합니다.
10. 기존 웹 앱 통합을 고려하세요. 이미 웹 앱이 있다면 Tauri를 기존 코드베이스에 통합해서 빠르게 데스크톱 앱으로 만들 수 있어요.
11. Node.js 설치를 확인하세요. 자바스크립트 프런트엔드 프레임워크를 쓴다면 Node.js는 필수 설치 요소입니다.
12. `rust-analyzer.cargo.targetDir`를 설정하세요. `rust-analyzer`와 `tauri dev` 간의 빌드 디렉토리 충돌을 피하려면 `rust-analyzer.cargo.targetDir`를 별도의 경로로 설정하는 게 좋아요. 이렇게 하면 컴파일 시간이 크게 줄어듭니다.
13. `MACOSX_DEPLOYMENT_TARGET` 일관성을 유지하세요. `rust-analyzer`와 `tauri.config.json` 간에 `MACOSX_DEPLOYMENT_TARGET` 값이 일치하는지 확인해서 불필요한 재컴파일을 막으세요.
14. 개발 Cargo 프로필을 최적화하세요. `src-tauri/Cargo.toml`에서 `[profile.dev.package."*"]`의 `opt-level`을 1로, `debug`를 `false`로 설정해서 종속성 컴파일 속도를 높이세요.
15. `incremental = true`를 유지하세요. 개발 빌드에서 `[profile.dev]`의 `incremental = true`를 활성화해서 변경된 부분만 다시 컴파일되도록 하세요. 이건 빠른 반복 작업에 꼭 필요합니다.
16. 릴리스 Cargo 프로필을 설정하세요. `[profile.release]`에서 `codegen-units = 1`, `lto = true`, `opt-level = "s"`(크기 최적화) 또는 `"3"`(속도 최적화), `panic = "abort"`, `strip = true`, `trim-paths = "all"`을 사용해서 최종 바이너리를 최적화하세요.
17. `rustflags`를 활용하세요. 릴리스 빌드 시 `rustflags = ["-Cdebuginfo=0", "-Zthreads=8"]`를 추가해서 디버그 정보 제거와 컴파일 스레드 증가로 성능을 높이세요.
18. 첫 컴파일 지연을 예상하세요. Cargo 프로필을 바꾼 뒤 첫 컴파일은 느릴 수 있어요. 이후 증분 빌드에서 개선된 성능을 확인하세요.
19. Tauri 2.0의 빠른 진행 상황을 주시하세요. Tauri 2.0은 빠르게 발전하고 있고, 2025년 6월 현재 핵심 플러그인들이 2.6으로 업데이트됐어요. 최신 버전을 계속 확인하고 활용하세요.
20. Tauri 최신 버전을 유지하세요. Tauri 프레임워크 자체의 취약점을 패치하려면 항상 최신 버전으로 업데이트해야 합니다.
21. 컴파일러 및 트랜스파일러를 업데이트하세요. `rustc`와 `nodejs` 같은 개발 도구 체인도 보안 수정 사항이 포함될 수 있으니 최신 상태를 유지하세요.
22. 개발 시스템 보안을 강화하세요. 운영체제, 빌드 도구 체인, 관련 종속성을 항상 최신 상태로 유지하고 보안을 강화하세요.
23. 신뢰할 수 있는 타사 라이브러리를 선택하세요. NPM과 Crates.io에서 패키지를 고를 때 신뢰할 수 있는 라이브러리만 사용하세요.
24. 자동화된 취약점 검사 도구를 사용하세요. `npm audit`와 `cargo audit`를 써서 종속성 취약점을 정기적으로 확인하세요.
25. 공급망 보안 도구를 활용하세요. `cargo-vet`, `cargo crev` 같은 Rust 생태계 도구를 써서 공급망 공격 가능성을 줄이세요. `cargo supply chain`으로 종속성 트리를 이해하세요.
26. 중요한 종속성은 버전을 고정하세요. Git에서 중요한 종속성을 가져올 때는 해시 버전(최고)이나 이름 붙은 태그(차선)를 사용해서 불변성을 보장하세요.
27. 개발 환경을 분리하세요. 일상적인 코딩에 관리자 계정을 쓰지 말고, 프로덕션 비밀을 개발 머신에 두지 마세요.
28. 보안 하드웨어 토큰을 사용하세요. 시스템이 손상될 때의 영향을 줄이려면 보안 하드웨어 토큰을 활용하는 걸 고려하세요.
29. 신뢰할 수 있는 네트워크에서 개발하세요. Tauri의 내장 개발 서버는 기본적으로 암호화되지 않고 인증되지 않은 자산을 노출할 수 있으니 신뢰할 수 있는 네트워크에서만 개발해야 합니다.
30. 커밋 서명 및 브랜치 보호를 설정하세요. 협업 프로젝트라면 모든 기여자가 커밋에 서명하도록 요구하고 Git 브랜치와 CI/CD 파이프라인을 강력하게 보호하세요.
31. 콘텐츠 보안 정책(CSP)을 구현하세요. WebView가 접근할 수 있는 통신 및 리소스 유형을 엄격하게 제어하기 위해 CSP를 사용하세요.
32. 기능(Capabilities)을 구성하세요. 신뢰할 수 없는 콘텐츠나 스크립트가 백엔드 API를 호출하지 못하도록 기능을 제한하세요.
33. 보안 테스트를 수행하세요. 자체 코드에 대한 보안 테스트를 꾸준히 수행하고 일반적인 보안 소프트웨어 개발 모범 사례를 따르세요.
34. 바이너리 서명은 필수입니다. 배포를 위해 앱의 실행 파일과 번들에 디지털 서명을 꼭 적용하세요. 대부분 플랫폼에서 필수 사항입니다.
35. 암호화 비밀은 안전하게 저장하세요. 서명 키 같은 암호화 비밀은 하드웨어 토큰에 저장해서 빌드 시스템이 손상되더라도 유출되지 않도록 하세요.
36. 재현 가능한 빌드의 한계를 알아두세요. 현재 Rust와 많은 프런트엔드 번들러는 완전히 재현 가능한 빌드를 안정적으로 만들지 못해요. CI/CD 시스템에 대한 어느 정도의 신뢰가 필요합니다.
37. Tauri 2.0 플러그인 시스템을 활용하세요. Tauri 2.0의 모듈식 플러그인 시스템은 코드 유지보수성을 높이고 사용자 지정 플러그인 제작을 가능하게 합니다.
38. 내장 플러그인을 탐색하세요. 자동 시작, 클립보드, 파일 시스템 접근, 알림, SQL 데이터베이스 통합 등 Tauri가 제공하는 다양한 내장 플러그인을 활용하세요.
39. 커뮤니티 플러그인을 활용하세요. 직렬 통신(`tauri-plugin-serialplugin`), Python 백엔드 통합(`tauri-plugin-python`), 상세 시스템 정보(`tauri-plugin-system-info`) 등 특정 요구사항에 맞는 커뮤니티 플러그인을 찾아보세요.
40. 네이티브 API 접근을 위한 플러그인을 사용하세요. Web Serial API처럼 WebView에서 직접 지원되지 않는 기능은 Tauri 플러그인을 통해 네이티브 기능을 활용해야 합니다.
41. `isTauri` 훅으로 환경을 구분하세요. 브라우저와 Tauri 환경을 구분해야 할 때 `isTauri` 훅을 사용해서 조건부로 네이티브 솔루션을 적용하세요.
42. Tauri 2.0 모바일 지원을 활용하세요. Tauri 2.0은 iOS 및 Android 플랫폼을 공식적으로 지원하니, 모바일 앱 개발에 Tauri를 고려하세요.
43. 모바일 플러그인을 사용하세요. 바코드 스캐너, 생체 인증, NFC 지원, 인앱 구매(IAP) 등 모바일 앱 개발에 특화된 플러그인을 활용하세요.
44. Swift 및 Kotlin 바인딩을 활용하세요. Tauri 2.0에서 플러그인에 대한 Swift 및 Kotlin 바인딩을 사용해서 플랫폼별 코드를 작성하고 네이티브 OS와 깊이 통합하세요.
45. CLI 빌드 명령을 사용하세요. `tauri build`는 데스크톱, `android build`, `ios build`는 모바일 플랫폼용 바이너리를 생성합니다.
46. 빌드 및 번들 단계를 분리하세요. 번들링에 더 세밀한 제어가 필요하다면 `tauri build --no-bundle` 후에 `tauri bundle`을 사용해서 특정 형식을 지정하세요.
47. 다양한 배포 형식을 활용하세요. Linux(AppImage, Debian, Flatpak 등), macOS(App Bundle, DMG), Windows(Microsoft Store, Installer) 등 대상 플랫폼에 맞는 다양한 배포 형식을 활용하세요.
48. GitHub Actions를 통한 CI/CD 자동화: `tauri-action` GitHub Action을 사용해서 macOS, Linux, Windows용 빌드 프로세스를 자동화하고 GitHub Release에 결과물을 올리세요.
49. `tauri.conf.json`으로 버전 관리를 하세요. 앱 버전은 `tauri.conf.json`의 `version` 옵션에서 정의하는 게 좋습니다.
50. 내장 업데이터 및 OTA 플러그인을 활용하세요. 데스크톱 앱의 경우 내장 자체 업데이터를 쓰고, 프런트엔드 코드만 업데이트할 거면 `tauri-plugin-ota`를 고려하세요.