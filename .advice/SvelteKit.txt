1.  Svelte 5 룬을 적극적으로 활용하세요. `$state`, `$derived`, `$effect`, `$props` 같은 룬은 Svelte 5의 핵심 반응형 모델이에요. 이걸 이해하고 잘 쓰는 게 중요합니다.
2.  `sv migrate` CLI 도구를 사용하세요. Svelte 4 프로젝트를 Svelte 5로 옮길 때 이 도구가 `let`을 `$state`로 바꾸는 등 많은 작업을 자동으로 처리해 줍니다.
3.  `$state()`를 사용해서 반응형 상태를 명시적으로 선언하세요. Svelte 4의 암시적인 `let` 반응성 대신, 모든 반응형 변수를 `$state()`로 감싸서 코드를 더 명확하게 만드세요.
4.  `$derived()`를 순수 계산에 활용하세요. 다른 반응형 상태에 의존하는 값은 `$derived()`를 사용해서 효율적으로 계산하고, 메모이제이션 기능으로 불필요한 재계산을 막으세요.
5.  `$effect()`를 사용해서 부작용을 관리하세요. 데이터를 저장하거나, API를 호출하거나, DOM과 상호 작용하는 등 부작용이 필요할 때는 `$effect()`를 사용해서 반응형 상태 변화에 따라 실행되도록 하세요.
6.  `$effect()`의 해체(teardown) 함수를 활용하세요. `$effect()`가 다시 실행되기 전에 정리할 작업이 필요하면, 해체 함수를 반환해서 리소스 누수를 막으세요.
7.  `$props()`를 통해 컴포넌트 속성을 선언하세요. Svelte 4의 `export let` 대신 `$props()`를 사용해서 속성을 정의하고, 구조 분해 할당으로 유연성을 확보하세요.
8.  `$props.id()`로 SSR 안전한 ID를 만드세요. SSR 환경에서 컴포넌트 인스턴스에 고유하고 일관된 ID를 부여해서 접근성과 하이드레이션 문제를 예방하세요.
9.  DOM 이벤트 핸들러에 표준 HTML 속성을 사용하세요. `on:click` 대신 `onclick`처럼 표준화된 구문을 사용해서 코드의 일관성과 가독성을 높이세요.
10. `createEventDispatcher` 상용구를 간소화하세요. Svelte 5에서는 사용자 정의 이벤트 처리가 더 간결해졌으니, 새로운 방식을 활용해서 코드 양을 줄이세요.
11. TypeScript를 기본적으로 사용하세요. Svelte 5의 내장 TypeScript 지원을 활용해서 타입 안전성을 확보하고 큰 앱에서 개발자 생산성을 높이세요.
12. 성능 측정으로 최적화를 시작하세요. 추측하지 말고 Lighthouse, WebPageTest, Chrome DevTools 같은 도구를 사용해서 진짜 병목 현상을 찾아내세요.
13. 핵심 웹 바이탈(CWV)을 정기적으로 모니터링하세요. FCP, LCP, TBT 같은 지표를 추적해서 성능 기준을 정하고 개선 사항을 계속 확인하세요.
14. 코드 분할 및 동적 임포트를 구현하세요. 큰 JavaScript 번들을 더 작고 경로 또는 컴포넌트별 청크로 나눠서 초기 로드 시간을 줄이세요.
15. 트리 쉐이킹으로 사용하지 않는 코드를 제거하세요. ES 모듈 구문을 따르고 Esbuild나 Vite 같은 최신 빌드 도구를 사용해서 번들 크기를 최적화하세요.
16. 모든 정적 자산을 압축하세요. gzip이나 Brotli 같은 압축 알고리즘을 사용해서 파일 크기를 줄이고 네트워크 전송 속도를 높이세요.
17. Svelte 컴파일러 설정을 활용하세요. 자산 사전 로딩, 파일 해싱, 보수적 무효화 같은 설정을 통해 로드 시간을 최적화하세요.
18. 로컬 상태를 효율적으로 관리하세요. 불필요한 렌더링을 피하기 위해 가능한 한 구체적으로 업데이트하고 로컬 상태를 사용하세요.
19. 파생 스토어를 사용해서 반복 계산을 줄이세요. `$` 또는 `$derived` 룬을 현명하게 사용해서 계산을 최적화하고 효율성을 높이세요.
20. DOM 상호 작용을 최소화하세요. Svelte는 기본적으로 DOM 상호 작용을 최소화하지만, 루프 안에서 DOM 업데이트를 묶어서 추가로 최적화하세요.
21. 이벤트 핸들링을 최적화하세요. 이벤트 위임, 디바운싱 기술, `requestAnimationFrame`을 사용해서 성능 병목 현상을 줄이고 부드러운 애니메이션을 구현하세요.
22. 병렬 비동기 작업에 `Promise.all`을 사용하세요. 개별 `await` 호출을 연결하는 대신 `Promise.all`을 사용해서 효율성을 높이고 이벤트 루프에 작업이 쌓이는 걸 막으세요.
23. SSR 및 SSG를 전략적으로 활용하세요. SvelteKit의 기본 SSR 및 SSG 기능을 사용해서 SEO를 개선하고 첫 화면 표시 시간을 단축하세요.
24. 강력한 캐싱 전략을 구현하세요. 정적 자산, API 응답, 사용자별 데이터에 대해 적절한 캐싱 정책을 적용해서 성능을 향상시키세요.
25. API 요청을 일괄 처리하세요. 여러 개의 작은 API 요청을 하나의 더 큰 요청으로 묶어서 네트워크 오버헤드를 줄이세요.
26. 서버 측 경로 해결 옵션을 고려하세요. 클라이언트 번들 크기를 최적화하기 위해 서버 런타임이 경로 요청을 처리하도록 설정하세요.
27. 범위 지정 CSS를 사용하세요. 스타일 충돌을 막고 번들 크기를 줄이기 위해 컴포넌트별로 CSS 범위를 지정하세요.
28. 중요한 CSS를 인라인으로 포함하세요. 첫 화면에 보이는 콘텐츠의 즉각적인 렌더링을 위해 중요한 스타일을 HTML에 직접 넣으세요.
29. CSS 선택기를 단순화하세요. 더 빠른 구문 분석 및 렌더링을 위해 복잡한 CSS 선택기를 피하고 간결하게 작성하세요.
30. 개발 환경 외에서 성능을 테스트하세요. 저사양 장치와 다양한 네트워크 조건에서 앱을 테스트해서 실제 사용자 경험을 시뮬레이션하세요.
31. 앱을 재사용 가능한 컴포넌트로 세분화하세요. UI 요소를 단일 책임의 컴포넌트로 나눠서 모듈성, 재사용성, 유지보수성을 높이세요.
32. 컴포넌트 내의 복잡한 로직을 제한하세요. 복잡한 비즈니스 로직은 별도의 유틸리티 함수나 모듈로 빼서 컴포넌트의 가독성과 순수성을 유지하세요.
33. Svelte 5 스니펫을 사용해서 컴포넌트 구성을 개선하세요. 재사용 가능한 마크업 청크를 생성해서 중복 코드를 줄이고 유연한 컴포넌트 구성을 가능하게 하세요.
34. 논리적이고 명확한 파일 구조를 유지하세요. 확장성, 유지보수성, 팀원의 빠른 온보딩을 위해 체계적인 디렉토리 구조를 따르세요.
35. 스토어를 과부하하지 마세요. 각 스토어가 단일 유형의 데이터나 기능을 처리하도록 해서 성능 문제와 유지보수 악몽을 막으세요.
36. 지역 상태에 `setContext` 및 `getContext`를 사용하세요. 특정 컴포넌트나 그 자식 내에서만 사용되는 데이터는 전역 스토어 대신 컨텍스트 API를 활용하세요.
37. 사용자 정의 스토어를 생성해서 데이터 제어를 강화하세요. 데이터가 설정되거나 수정되는 방식을 더 잘 제어하기 위해 사용자 정의 메서드가 붙은 스토어를 만드세요.
38. 변수 및 함수에 설명적인 이름을 사용하세요. 코드의 가독성과 이해도를 높이기 위해 기능이나 데이터를 명확하게 반영하는 이름을 선택하세요.
39. ES2025+ JavaScript 기능을 활용하세요. 새로운 언어 기능을 사용해서 코드를 현대화하고, 불필요한 폴리필을 제거해서 번들 크기를 최적화하세요.
40. SvelteKit의 `load` 함수를 사용해서 데이터를 효율적으로 가져오세요. 페이지 및 레이아웃에 `load` 함수를 정의해서 SSR, 클라이언트 초기화, 탐색 중에 데이터를 가져오세요.
41. `load` 함수에서 데이터를 병렬로 가져오세요. 최적의 페이지 성능을 위해 필요한 모든 데이터를 병렬로 가져와서 로드 시간을 단축하세요.
42. API 경로 및 미들웨어를 활용해서 백엔드 로직을 통합하세요. `src/routes`에 `.js` 또는 `.ts` 파일을 만들어서 API 엔드포인트를 정의하고, 미들웨어를 사용해서 공통 관심사를 처리하세요.
43. SvelteKit 폼 액션을 사용해서 서버에 데이터를 POST하세요. 점진적 향상 기능 덕분에 폼 액션을 선호하고, `default` 및 `named` 액션 사용법을 이해하세요.
44. `use:enhance` 액션을 적용해서 폼 상호 작용을 개선하세요. JavaScript가 활성화된 경우 부드러운 사용자 경험을 위해 폼에 `use:enhance`를 추가하세요.
45. 브라우저 개발자 도구의 '요소' 패널을 활용하세요. 컴포넌트 구조, 중첩, 실시간 상태 변화를 검사해서 렌더링 문제를 찾아내세요.
46. '네트워크' 탭을 사용해서 API 호출을 분석하세요. 요청 헤더, 응답 시간, 오류 메시지를 모니터링해서 백엔드 상호 작용을 파악하고 오류 처리를 확인하세요.
47. '성능' 탭을 사용해서 렌더링 및 스크립팅 병목 현상을 식별하세요. 세션을 기록해서 함수 호출 스택 및 메모리 사용량을 시각화하고 최적화가 필요한 코드를 찾아내세요.
48. Svelte 개발자 도구 확장을 설치하고 활용하세요. 컴포넌트 트리 뷰, 실시간 상태 추적, 성능 분석 기능을 사용해서 디버깅 효율성을 높이세요.
49. `console.log()`, `console.error()`, `console.warn()`를 전략적으로 사용하세요. 간결하고 관련성 있는 로깅을 유지하고, 조건부 중단점 및 감시 표현식을 활용해서 디버깅에 집중하세요.
50. 인증 흐름에서 Race Condition을 막기 위해 반응형 접근 방식을 채택하세요. `onMount`에서 한 번만 확인하는 대신 `$effect`를 사용해서 인증 상태 변화에 반응하고, 서버 훅의 견고성을 보장하세요.