### TypeScript의 진화: 2024년 8월 ~ 2025년 8월 기능 및 지원 중단 사항 종합 검토 보고서

2024년 8월부터 2025년 8월까지는 TypeScript의 발전에 있어 매우 역동적인 시기였습니다. 이 기간 동안 TypeScript는 **5.5, 5.6, 5.7, 5.8, 5.9**와 같은 여러 버전을 출시하며 타입 시스템의 정확성과 개발자 경험을 크게 향상시켰습니다.

---

### 1. 주요 변경 사항 및 호환성 문제

TypeScript는 타입 시스템을 더 엄격하고 정확하게 만들고, Node.js 모듈 해결 표준에 맞추기 위해 일부 호환성 변경을 단행했습니다.

* **Promise.resolve 타입 변경 (v4.9)**: `Promise.resolve`의 반환 타입이 **`Awaited`** 유틸리티 타입을 사용하여 더 정확하게 언랩되도록 변경되었습니다. 이는 기존 코드에서 타입 오류를 유발할 수 있습니다.
* **`exports` 필드 우선순위 변경 (v4.9)**: `--moduleResolution node16` 설정에서 `package.json`을 통해 모듈을 해결할 때 `typesVersions`보다 `exports` 필드가 우선순위를 가지도록 변경되었습니다.
* **`lib.d.ts` 업데이트**: ECMAScript 및 DOM API가 발전함에 따라 `lib.d.ts` 파일이 정기적으로 업데이트되어 DOM 관련 코드의 타입 검사에 사소한 영향을 미칠 수 있습니다.
* **`--module nodenext`의 임포트 어설션 제한 (v5.8)**: `Node.js v22`에 맞춰 `--module nodenext`가 활성화된 경우 `import ... assert { type: "json" };` 대신 **`import ... with { type: "json" };`** 구문을 사용해야 합니다.

---

### 2. 새롭게 추가된 기능 및 개선 사항

TypeScript는 개발자 경험을 향상시키고 최신 웹 표준을 적극적으로 수용하는 다양한 기능을 도입했습니다.

* **타입 시스템 강화**:
    * **추론된 타입 술어 (v5.5)**: `filter`와 같은 함수에서 타입 좁히기를 자동화하여 코드 간결성과 타입 추론의 정확성을 높였습니다.
    * **`Nullish` 및 `Truthy` 검사 금지 (v5.6)**: 항상 참 또는 거짓인 조건부 표현식을 플래그 지정하여 잠재적인 논리 오류나 데드 코드를 사전에 발견합니다.
    * **`--strictBuiltinIteratorReturn` (v5.6)**: `Iterator.next()`의 반환 타입이 `any`로 추론되는 것을 방지하여 타입 안전성을 높였습니다.
* **ECMAScript 표준 채택**:
    * **ECMAScript 2024 기능 지원 (v5.7)**: `--target es2024`를 통해 `Object.groupBy`, `Promise.withResolvers` 등 최신 ECMAScript 2024 기능을 활용할 수 있습니다.
    * **이터레이터 헬퍼 메서드 (v5.6)**: `map`, `take`와 같은 `Stage 3` ECMAScript 이터레이터 헬퍼 메서드를 지원하여 메모리 효율적인 데이터 처리가 가능해졌습니다.
    * **`import defer` 구문 (v5.9)**: 모듈이 즉시 실행되지 않고 임포트된 속성에 접근할 때까지 실행을 지연시키는 `ECMAScript` 제안을 지원하여, 애플리케이션 시작을 최적화합니다.
* **컴파일러 및 도구 개선**:
    * **향상된 `tsc --init` (v5.9)**: `tsc --init`이 생성하는 `tsconfig.json` 파일이 더 간결하고 현대적인 설정으로 업데이트되었습니다.
    * **확장 가능한 호버 (v5.9)**: 편집기 호버 툴팁 내에서 복잡한 타입 정의를 확장/축소할 수 있는 대화형 버튼이 추가되어 타입 탐색이 용이해졌습니다.
    * **`--rewriteRelativeImportExtensions` (v5.7)**: 컴파일 시 상대 임포트 경로의 확장자를 `JavaScript` 확장자로 자동 재작성하여 `ts-node`와 같은 "즉시 실행" TypeScript 도구와의 호환성을 높였습니다.

---

### 3. 결론 및 권장 사항

2024년 8월부터 2025년 8월까지의 TypeScript는 타입 시스템의 정확성을 높이고, 개발자 경험을 개선하며, 최신 웹 표준을 선제적으로 통합하는 데 중점을 두었습니다. 이러한 변화는 TypeScript가 대규모 및 복잡한 코드베이스에서 효율성과 신뢰성을 유지하는 데 필수적입니다.

#### 개발자를 위한 권장 사항
1.  **정기적인 업데이트**: 새로운 기능, 성능 개선, 중요한 버그 수정 이점을 누리기 위해 TypeScript를 정기적으로 업데이트하세요.
2.  **새로운 기능 활용**: `tsc --init`으로 현대적인 프로젝트를 시작하고, `import defer`와 같은 새로운 기능을 활용하여 애플리케이션을 최적화하세요. `확장 가능한 호버` 기능을 통해 복잡한 타입 탐색의 효율성을 높이세요.
3.  **마이그레이션 대비**: `Promise.resolve`의 타입 변경과 같은 호환성 문제에 대비하여 업그레이드 후 기존 코드를 검토하세요.
4.  **미래 로드맵 인지**: **TypeScript 컴파일러의 `Go 포팅`**(TypeScript 7.0 예상)과 같은 장기적인 변화를 인지하고, `ESM`을 기본 모듈 시스템으로 채택하는 등 미래 지향적인 개발 관행을 수용하세요.