### Tauri 프레임워크 진화 보고서: 2024년 8월 ~ 2025년 8월 기능 변화 분석

#### 서론
2024년 8월부터 2025년 8월까지는 **Tauri 2.0의 안정적인 출시**로 인해 Tauri 프레임워크에 있어 중대한 전환점을 맞았습니다. 이 기간 동안 Tauri는 기능, 아키텍처, 그리고 개발자 경험에 큰 변화를 주었습니다. Tauri 2.0의 핵심 변화는 다음과 같습니다.

* **모바일(Android/iOS) 지원**: Tauri를 데스크톱을 넘어 모바일 크로스 플랫폼 프레임워크로 확장했습니다.
* **플러그인 중심의 모듈화**: 핵심 기능들을 전용 플러그인으로 분리하여 프레임워크를 더 작고 유연하게 만들었습니다.
* **새로운 권한 시스템**: 이전의 `allowlist`를 대체하는 세분화된 기능(capabilities) 기반의 권한 시스템을 도입하여 보안을 강화했습니다.

이러한 변화는 기존 Tauri 1.x 애플리케이션의 마이그레이션에 상당한 리팩토링이 필요하지만, 향상된 유연성과 보안, 그리고 더 넓은 플랫폼 도달 범위를 제공합니다.

---

### Tauri 2.0: 새로운 기능 및 핵심 아키텍처 변화

Tauri 2.0은 프레임워크의 기반을 재정의하는 몇 가지 중요한 아키텍처 변화를 도입했습니다.

#### 1. 플러그인 기반의 모듈화
- **기능 분리**: 기존 `api` 모듈 내에 통합되어 있던 `dialog`, `http`, `shell`, `updater`와 같은 많은 핵심 API가 이제 **전용 플러그인**으로 추출되었습니다.
- **예시**: `api::dialog`는 **`tauri-plugin-dialog`**로, `@tauri-apps/api/http`는 **`@tauri-apps/plugin-http`**로 대체되었습니다.
- **의의**: 핵심 프레임워크의 복잡성을 줄이고, 필요한 기능만 선택적으로 포함할 수 있어 **애플리케이션 바이너리 크기를 줄이는** 동시에, 커뮤니티의 기여를 촉진하여 생태계 확장을 가능하게 합니다.

#### 2. 강화된 보안 모델
- **`allowlist` 제거**: 이전의 `tauri > allowlist`가 완전히 제거되었습니다.
- **기능 기반 권한 시스템**: **`src-tauri/capabilities`** 폴더에 기능 파일을 생성하여 애플리케이션의 권한을 명시적으로 정의하는 새로운 시스템이 도입되었습니다.
- **의의**: 애플리케이션에 **최소한의 권한**만 부여하도록 강제하여 웹뷰가 손상될 경우의 공격 표면을 크게 줄입니다. 이는 Tauri의 보안 모델에 대한 성숙한 접근 방식을 반영합니다.

#### 3. 모바일 지원 및 확장
- **공식 모바일 지원**: **Android 및 iOS**용 애플리케이션 구축을 공식적으로 지원하여, 단일 코드베이스로 데스크톱과 모바일 앱을 모두 개발할 수 있게 되었습니다.
- **다중 웹뷰 지원**: 단일 애플리케이션 내에서 여러 웹뷰 인스턴스를 관리할 수 있는 기능이 도입되어, 복잡한 UI 아키텍처와 모바일 개발 패턴에 필수적인 기반을 마련했습니다.
- **향상된 창 관리 API**: `tauri::Window` 및 `tauri::WindowBuilder`가 **`tauri::WebviewWindow`** 및 **`tauri::WebviewWindowBuilder`**로 대체되어 창의 외관, 동작, 상호 작용에 대한 정교한 제어를 제공합니다.

---

### 지원 중단 및 마이그레이션 고려 사항

Tauri 2.0으로의 마이그레이션은 단순한 업데이트를 넘어선 광범위한 리팩토링을 수반합니다.

#### 1. 구성 파일 및 Cargo 변경 사항
- **구성 파일 구조 변경**: `tauri.conf.json`의 구조가 변경되어 `package` 키가 제거되고, `tauri` 키가 `app`으로 이름이 변경되었습니다.
- **`allowlist` 제거**: `allowlist`가 제거되고, 새로운 권한 시스템에 따라 기능 파일을 생성하고 권한을 재정의해야 합니다.
- **`Cargo` 기능 변경**: `reqwest-client`, `updater`, `system-tray`와 같은 Cargo 기능들이 제거되거나 이름이 변경되었습니다.

#### 2. Rust 및 JavaScript API 변경 사항
- **`api` 모듈 제거**: Rust의 `api` 모듈이 완전히 제거되었으며, 해당 기능은 이제 **전용 플러그인 크레이트**를 통해 접근해야 합니다.
- **JS API 재구성**: `@tauri-apps/api` 패키지가 재구성되어, 많은 모듈이 `@tauri-apps/plugin-*`과 같은 **새로운 플러그인 패키지**로 이동했습니다.
- **`onMenuClicked` 함수 제거**: 메뉴 이벤트는 이제 JavaScript에서 메뉴를 생성할 때 직접 처리해야 합니다.

---

### 결론 및 권장 사항

Tauri 2.0은 모바일 지원, 모듈화, 보안 강화라는 핵심 목표를 달성하기 위해 **파괴적이지만 필수적인 변화**를 단행했습니다. 이러한 변화는 기존 사용자에게 마이그레이션 부담을 주지만, 장기적으로는 더 안전하고 유연하며 미래 지향적인 프레임워크를 제공합니다.

* **마이그레이션 전략**: 기존 Tauri 1.x 애플리케이션을 마이그레이션하려면 **`Tauri CLI`의 `migrate` 명령**을 활용하고, 변경된 구성, API, 플러그인을 수동으로 업데이트하는 계획을 수립해야 합니다.
* **보안 우선 설계**: 새로운 권한 시스템을 활용하여 **최소 권한 원칙**에 따라 애플리케이션의 기능을 명시적으로 정의하는 것을 최우선으로 하세요.
* **새로운 기능 활용**: 새로운 프로젝트에서는 `create-tauri-app`으로 시작하여 모바일 지원, 다중 웹뷰, 향상된 창 관리 API 등 Tauri 2.0의 강력한 기능을 적극적으로 활용하세요.