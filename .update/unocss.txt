### UnoCSS 기능 변경 보고서 (2024년 8월 ~ 2025년 8월)

2024년 8월부터 2025년 8월까지 UnoCSS는 v66.x.x 시리즈를 중심으로 활발하게 개발되었습니다. 이 기간은 **핵심 엔진의 성능 최적화, 아키텍처 재구성, 그리고 최신 웹 개발 도구와의 통합 강화**에 중점을 둔 중요한 전환점입니다.

---

### 1. 신규 추가된 기능 및 개선 사항

UnoCSS는 개발자 유연성, 성능, 그리고 최신 웹 개발 도구와의 통합을 향상시키기 위한 다양한 기능을 도입하고 개선했습니다.

#### 1.1. 핵심 엔진 및 규칙 개선
* **향상된 정적 규칙 파싱**: UnoCSS의 핵심 엔진이 개선되어 유틸리티 클래스를 더 정확하고 효율적으로 처리합니다. 이는 UnoCSS의 "즉각적인" 성능을 더욱 강화합니다.
* **`nth-` 선택기 지원 강화**: `nth-child(odd)`와 같은 복잡한 구조적 스타일링을 위한 선택기 지원이 강화되어 사용자 정의 CSS의 필요성을 줄였습니다.
* **프리셋 `wind4`의 진화**: Tailwind CSS v4와의 호환성을 위한 **`preset-wind4`**가 지속적으로 업데이트되었습니다.
    * **새로운 변형**: `inert`, `wrap-`, `in-*` 변형이 추가되어 조건부 스타일링과 반응형 레이아웃 기능이 확장되었습니다.
    * **점진적 저하**: `@property`와 같은 최신 CSS 기능에 대한 **점진적 저하**를 지원하여, 새로운 기능과 하위 브라우저 호환성을 모두 확보했습니다.

#### 1.2. 통합 및 툴링 개선
* **프레임워크 지원 강화**: **Vite 7** 및 **Nuxt 4**에 대한 공식 지원이 추가되어, UnoCSS가 최신 웹 프레임워크와 원활하게 통합되도록 보장했습니다.
* **ESLint 개선**: **`clsx`**와 같은 유틸리티 그룹화 함수에 대한 린팅 정렬 지원이 추가되어 코드 품질과 일관성이 향상되었습니다.
* **VS Code 확장 업데이트**: 템플릿 오류 사전 감지, 사용자 정의 테마 색상 표시 수정 등 VS Code 환경에서의 개발자 경험이 지속적으로 개선되었습니다.
* **성능 최적화**: `crypto.hash`를 해싱 작업에 활용하고 동적/정적 가져오기 충돌을 최적화하는 등, 낮은 수준에서 지속적인 성능 개선이 이루어졌습니다.

---

### 2. 더 이상 지원되지 않는 기능 및 주요 변경 사항

이 기간 동안 UnoCSS는 핵심 메커니즘을 더욱 강력하게 만들기 위한 중요한 아키텍처 변경을 단행했습니다.

* **`transformer-attributify-jsx`의 아키텍처 변경**: `v66.4.0`부터 `transformer-attributify-jsx`가 정규식 기반 파싱에서 더 강력하고 표준을 준수하는 **Babel 플러그인** 기반 파싱으로 전환되었습니다. 이 변경은 기존 프로젝트에 호환성 문제를 일으킬 수 있으므로 주의가 필요합니다.

* **`ESM-only` 마이그레이션**: 이 기간 이전에 이루어진 변경 사항이지만, UnoCSS는 `v0.59.0`부터 ESM-only로 전환되었습니다. 이는 Webpack 및 Vue CLI 사용자의 모듈 로딩 방식에 영향을 미칩니다.

* **프리셋 이름 변경**: `preset-wind` 및 `preset-uno`는 `preset-wind3`로 이름이 변경되었습니다.

---

### 3. 개발자를 위한 권고 사항

UnoCSS의 활발하고 역동적인 개발 주기를 고려할 때, 개발자는 다음과 같은 전략적 접근을 통해 최적의 워크플로를 유지해야 합니다.

* **정기적인 업데이트**: 새로운 기능, 버그 수정 및 성능 향상의 이점을 누리기 위해 UnoCSS를 정기적으로 업데이트하고, 주요 버전 간의 큰 폭의 점프를 피해야 합니다.
* **`transformer-attributify-jsx` 마이그레이션**: `v66.4.0` 이상으로 업그레이드할 경우, **빌드 도구와 Babel 설정**을 검토하여 `transformer-attributify-jsx`의 새로운 파싱 방식과 호환성을 보장해야 합니다.
* **새로운 기능 활용**: **`preset-wind4`**의 새로운 변형, **`preset-web-fonts`**의 최적화 옵션, 그리고 향상된 **`VS Code`** 및 **`ESLint`** 통합을 적극적으로 활용하여 개발 효율성을 높일 수 있습니다.
* **커뮤니티 활용**: 복잡한 문제가 발생하거나 최신 개발 동향을 파악하기 위해 UnoCSS 커뮤니티(GitHub Discussions, Discord)를 활용하는 것이 좋습니다.