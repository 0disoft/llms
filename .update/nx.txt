### Nx 모노레포: 2024년 8월 ~ 2025년 8월 기능 변경 및 지원 중단 분석 보고서

2024년 8월부터 2025년 8월까지의 기간은 Nx 모노레포의 발전에 있어 중요한 시기입니다. 이 기간 동안 Nx는 **Nx 20**과 **Nx 21.x**를 릴리스하며, **Rust 기반 코어 전환**, **데이터베이스 기반 캐싱 도입**, 그리고 **AI 기반 기능**을 Nx Cloud에 통합하는 등 혁신적인 변화를 단행했습니다.

---

### 1. 핵심 Nx 기능 중단 및 주요 변경 사항

Nx는 프레임워크의 브랜드 정체성을 표준화하고, 아키텍처를 현대화하기 위해 여러 레거시 기능의 지원을 중단하거나 제거했습니다.

* **`@nrwl` npm 스코프 지원 중단**: Nx 20부터 `@nrwl` 스코프 패키지에 대한 지원이 공식적으로 중단되었습니다. 모든 사용자는 **`@nx` 스코프 패키지**로 마이그레이션해야 합니다.
* **제너레이터의 파생 디렉토리 제거**: Nx 20은 생성된 앱과 라이브러리의 위치를 자동으로 추론하던 기능을 제거했습니다. 이제 앱이나 라이브러리를 생성할 때 **`directory`를 명시적으로 지정**해야 합니다.
* **`nx.json`에서 레거시 캐시 플래그 제거**: Nx 21.0부터 파일 기반 캐싱을 위한 레거시 플래그가 제거되었습니다. 이제 **데이터베이스 기반 캐싱**이 유일한 기본값이 됩니다.
* **Node.js 버전 지원 중단**: Nx 21.0은 **Node.js 버전 20.19.0 이전** 버전에 대한 지원을 중단했습니다.
* **Angular 17 지원 제거**: Nx 21.2는 **Angular 17**에 대한 지원을 제거하고, Angular 20 지원을 추가했습니다. Angular 사용자는 최신 버전으로 업그레이드해야 합니다.
* **`Nx Release` 동작 변경**: `nx.json`의 `useLegacyVersioning`의 기본값이 `false`로 변경되어, 새로운 버전 관리 로직이 유일한 기본값이 됩니다.

---

### 2. Nx 핵심의 주요 신규 기능 및 개선 사항

Nx는 성능, 개발자 경험(DX), 그리고 생태계 지원을 강화하기 위한 여러 기능을 도입했습니다.

* **Rust로 Nx 핵심 전환 (진행 중)**: 캐싱 및 해싱과 같은 성능에 중요한 Nx 핵심 부분을 **Rust로 재작성**하고 있습니다. 이는 Nx가 JavaScript 외의 언어로 작성된 모노레포까지 지원하는 **다국어 모노레포 오케스트레이터**로 확장하려는 전략을 나타냅니다.
* **데이터베이스 기반 캐싱**: 모노레포가 성장할수록 성능 병목 현상이 될 수 있었던 파일 기반 캐싱 시스템을 대체하는, **더 빠르고 견고한 캐싱 솔루션**이 도입되었습니다.
* **지속적인 작업**: `serve`, `test --watch`와 같은 작업이 백그라운드에서 지속적으로 실행되며 파일 변경 시 자동으로 업데이트됩니다. 이는 개발자의 수동 재시작 오버헤드를 줄여 **개발 루프를 간소화**합니다.
* **개선된 TypeScript 모노레포**: Nx 20은 **TypeScript 프로젝트 참조**를 기본으로 활성화하고, 패키지 연결을 위해 **표준 워크스페이스(npm, yarn, pnpm, bun)**를 채택했습니다. 이는 대규모 TypeScript 모노레포의 빌드 및 타입 검사 속도를 향상시킵니다.
* **`nx import` 명령**: 기존 외부 프로젝트를 원래의 Git 기록을 보존하면서 Nx 워크스페이스로 가져올 수 있는 `nx import` 명령이 도입되어 **모노레포 채택의 장벽**을 낮췄습니다.

---

### 3. Nx Cloud 및 CI/CD 발전

Nx Cloud는 CI/CD 워크플로를 최적화하기 위한 중요한 기능을 도입하여 모노레포 관리를 혁신하고 있습니다.

* **AI 기반 CI/CD**: AI 기반 **자가 치유 CI**를 도입하여 CI 실패를 자동으로 진단하고 수정합니다. 이는 CI 디버깅 시간을 대폭 단축하여 개발자 생산성을 향상시킵니다.
* **지능형 작업 분배**: **할당 규칙**과 **사용자 정의 리소스 클래스**를 통해 어떤 작업이 어떤 에이전트에서 실행될지 세밀하게 제어할 수 있게 되었습니다. 이는 CI 비용과 성능을 최적화하는 데 도움이 됩니다.
* **향상된 통합**: **GitLab, GitHub, Bitbucket**과의 통합이 강화되었고, **개인 액세스 토큰(PAT)**을 통해 로컬 캐시 접근에 대한 보안이 향상되었습니다.

---

### 4. 개발자를 위한 권장 사항

Nx의 변화는 도전이자 기회입니다. 성공적인 업그레이드와 효율적인 모노레포 관리를 위해 다음과 같은 권장 사항을 고려해야 합니다.

* **업그레이드 계획 우선순위 지정**: `@nrwl` 스코프 제거, `directory` 옵션 명시적 지정 등 주요 변경 사항을 숙지하고, **전용 마이그레이션 스프린트**를 통해 체계적인 업그레이드를 계획하세요.
* **새로운 기능 활용**: **지속적인 작업**과 **개선된 TypeScript 워크스페이스**를 활용하여 개발자 경험을 향상시키고, Nx Cloud의 **AI 기능**으로 CI/CD를 최적화하세요.
* **마이그레이션 도구 활용**: `nx import` 명령을 사용하여 기존 프로젝트의 통합을 간소화하고, `nx release`의 새로운 버전 관리 로직에 적응하세요.
* **지속적인 학습**: Rust 기반 코어 전환, 새로운 프레임워크 지원 등 Nx의 로드맵에 대한 정보를 꾸준히 확인하여 미래 변화에 대비하세요.