### Prisma ORM: 2024년 8월 ~ 2025년 8월 주요 기능 변경 및 지원 중단 보고서

2024년 8월부터 2025년 8월까지의 기간은 Prisma ORM의 중요한 전환점입니다. 이 시기 동안 Prisma는 **Rust 엔진 없는 ORM**으로의 근본적인 아키텍처 변화를 추진하고, **개발자 경험을 강화**하며, **Prisma Postgres를 통한 클라우드 네이티브 데이터베이스 관리**로 확장했습니다.

---

### 1. 주요 기능 추가 및 개선 사항

#### 1.1. 프로덕션 준비를 위한 기능 성숙
* **Prisma Config 파일 (`prisma.config.ts`)**: Prisma 프로젝트의 구성 옵션을 관리하는 `prisma.config.ts` 파일이 일반 가용성(GA) 상태가 되었습니다. 스키마, 마이그레이션, 쿼리 등의 위치를 유연하게 지정할 수 있게 되어 복잡한 프로젝트 구조나 모노레포 환경에 대한 지원이 강화되었습니다.
* **다중 스키마 지원**: `@@schema` 속성을 사용하여 테이블을 다양한 데이터베이스 스키마에 할당하는 기능이 GA 상태가 되었습니다. 이는 엔터프라이즈급 데이터베이스 아키텍처에서 데이터의 논리적 분리를 용이하게 합니다.

#### 1.2. 미래 역량을 엿보는 새로운 기능
* **Rust 엔진 없는 Prisma ORM**: Rust 쿼리 엔진을 TypeScript 기반 솔루션으로 대체하는 근본적인 재설계가 모든 주요 SQL 데이터베이스에 대한 미리보기 상태가 되었습니다. 이 변화는 **번들 크기 감소, 쿼리 속도 향상, CPU 사용량 감소**를 목표로 합니다.
* **`pgvector` 및 기타 확장 지원**: Prisma Postgres는 AI 기반 애플리케이션 개발에 필수적인 `pgvector` PostgreSQL 확장에 대한 초기 액세스 지원을 추가했습니다.
* **Prisma Postgres용 관리 API**: Prisma Postgres 인스턴스(프로비저닝, 삭제 등)를 프로그래밍 방식으로 관리할 수 있는 REST API가 도입되어 **CI/CD 파이프라인**에 데이터베이스 관리를 통합할 수 있게 되었습니다.

#### 1.3. 개발자 경험 향상
* **외부 관리형 테이블**: Prisma Migrate에 의해 무시되지만 Prisma Client를 통해 쿼리할 수 있는 "외부 관리형" 테이블 기능이 도입되어 하이브리드 데이터 환경의 상호 운용성을 높였습니다.
* **로컬 `Prisma Postgres` 개선**: `prisma dev stop` 및 `prisma dev rm`과 같은 새로운 CLI 명령이 추가되어 로컬 데이터베이스 인스턴스 관리가 간소화되었습니다.
* **타입 성능 향상**: TypeScript 환경에서 편집기 속도 저하 및 자동 완성 지연 문제가 해결되어 개발자 생산성이 향상되었습니다.

---

### 2. 지원 중단 또는 제거된 기능

* **Prisma Client 미들웨어 제거**: `v4.16.0`부터 지원 중단된 Prisma Client 미들웨어가 `v6.14.0` 릴리스에서 공식적으로 제거되었습니다. **Prisma Client 확장**을 사용하는 것이 권장됩니다.
* **`metrics` 미리보기 기능 사용 중단**: `metrics` 미리보기 기능이 `v6.14.0`에서 지원 중단되었습니다.
* **`pg-worker` 패키지 사용 중단**: Cloudflare Workers에서 표준 `pg` 패키지를 직접 사용할 수 있게 되면서 `pg-worker` 패키지가 사용 중단되었습니다.

---

### 3. 개발자를 위한 권장 사항

1.  **마이그레이션 계획 수립**: Prisma Client 미들웨어에 의존하는 기존 프로젝트는 Prisma Client 확장으로 마이그레이션해야 합니다.
2.  **`Rust-Free` ORM 실험**: 새로운 아키텍처의 성능 이점을 파악하기 위해 비프로덕션 환경에서 **`queryCompiler` 및 `driverAdapters`** 미리보기 기능을 활성화하고 테스트하는 것이 좋습니다.
3.  **향상된 로컬 개발 도구 활용**: 새로운 `prisma dev` CLI 명령과 VS Code 확장 UI를 활용하여 로컬 개발 워크플로를 간소화하세요.
4.  **AI 기능 탐색**: `pgvector`에 대한 지원을 활용하여 AI/ML 기반 애플리케이션을 Postgres 내에서 직접 구축하는 것을 고려해 볼 수 있습니다.