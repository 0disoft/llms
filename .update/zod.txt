### Zod 라이브러리의 2024년 8월 ~ 2025년 8월 기능 변경 분석 보고서

2024년 8월부터 2025년 8월까지의 기간은 Zod 라이브러리가 **Zod 3에서 Zod 4로 대규모 전환**을 완료한 중요한 시기입니다. 이 전환은 API의 광범위한 재정비와 함께 개발자 경험, 타입 안전성, 그리고 성능 향상을 목표로 했습니다.

---

### 1. Zod 4: 주요 변경 및 폐기된 기능

Zod 4는 기존 API를 간소화하고 일관성을 높이기 위해 많은 Breaking Change를 도입했습니다.

#### 1.1. 오류 처리 및 ZodError 객체
* **통합된 오류 매개변수**: `message`, `invalid_type_error` 등 분리된 매개변수들이 단일하고 통합된 **`error`** 매개변수로 표준화되었습니다.
* **`errorMap` → `error`**: `errorMap`은 `error`로 이름이 변경되고 기능이 확장되었습니다.
* **유틸리티 메서드 폐기**: `.format()`, `.flatten()`, `.formErrors`와 같은 메서드들이 폐기되고, 새로운 **`z.treeifyError()`** 최상위 함수로 대체되었습니다.

#### 1.2. 스키마 메서드 업데이트
* **숫자 유효성 검사 강화**: `z.number()`가 **`POSITIVE_INFINITY`** 및 **`NEGATIVE_INFINITY`**를 허용하지 않게 되었고, `.int()`는 **안전한 정수**만 허용하도록 변경되었습니다.
* **문자열 유효성 검사기 이동**: `z.string().email()`과 같은 체이닝 방식이 폐기되고, **`z.email()`**과 같은 최상위 함수로 이동되었습니다. 이는 코드 간결성과 트리 쉐이킹에 이점을 줍니다.
* **`z.object()` 메서드 변경**: `.strict()`, `.passthrough()`, `.merge()`와 같은 메서드들이 폐기되었고, `z.strictObject()`, `z.looseObject()`, 객체 비구조화(object destructuring) 등으로 대체되었습니다.
* **`z.function()` 재설계**: `z.function()`이 더 이상 스키마가 아닌 "함수 팩토리"로 동작하도록 재설계되었습니다.
* **`z.nativeEnum()` 폐기**: `z.enum()`이 열거형과 유사한 입력을 지원하도록 개선되면서 `z.nativeEnum()`이 폐기되었습니다.
* **`z.promise()` 폐기**: 해결된 데이터 검증에 Zod를 사용하도록 권장하며 `z.promise()` 스키마가 폐기되었습니다.

---

### 2. Zod 4: 새로운 기능 및 개선 사항

Zod 4는 기존 API를 재정비하는 동시에 개발자 경험을 향상시키는 새로운 기능들을 도입했습니다.

* **`.prefault()` API**: Zod 3의 `.default()` 동작(기본값이 파싱되기 전에 적용되는 방식)을 재현하기 위해 새로운 `.prefault()` 메서드가 추가되었습니다.
* **`z.strictObject()` 및 `z.looseObject()`**: 객체 스키마를 정의할 때 엄격하거나 통과(passthrough) 동작을 명시적으로 지정하기 위한 새로운 최상위 함수입니다.
* **향상된 `z.enum()` 지원**: TypeScript 열거형을 Zod 스키마에 통합하는 것이 더 직관적으로 바뀌었습니다.
* **열거형 키 완전성 검사**: `z.record()`가 열거형을 키 스키마로 사용할 때, 파싱 중에 모든 열거형 키가 입력에 존재하는지 확인하여 타입 안전성을 높입니다.
* **`z.partialRecord()`**: 선택적 키를 가진 레코드 스키마를 명확하게 정의하기 위한 새로운 메서드입니다.

---

### 3. 결론 및 마이그레이션 가이드

Zod 4는 **API 일관성, 엄격한 유효성 검사, 성능 최적화**에 중점을 둔 전략적 진화의 결과물입니다. Zod 개발팀은 Zod 3와 Zod 4를 동시에 지원하는 서브패스 버전 관리 전략을 통해 생태계의 혼란을 최소화하며 성공적으로 전환을 완료했습니다.

#### 마이그레이션 권장 사항
1.  **npm 패키지 업데이트**: `npm install zod@^4.0.0` 명령으로 Zod 4를 설치하세요.
2.  **API 변경 사항 확인**: 오류 처리, 문자열 유효성 검사, `z.object()` 메서드 등 주요 변경 사항에 맞춰 기존 코드를 재작성해야 합니다.
3.  **`codemod` 도구 활용**: 커뮤니티에서 제공하는 `zod-v3-to-v4`와 같은 자동화 도구를 활용하여 마이그레이션 노력을 줄일 수 있습니다.
4.  **철저한 테스트**: 변경된 기본 동작과 엄격해진 유효성 검사 규칙으로 인해 기존 스키마에 예기치 않은 오류가 발생할 수 있으므로, 마이그레이션 후 철저한 테스트를 진행하세요.