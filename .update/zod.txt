2024년 8월부터 2025년 8월까지 Zod의 변화를 조사한 결과, 이 기간의 가장 중요한 변화는 Zod 3에서 Zod 4로의 전환입니다. Zod 4는 2025년 7월 8일에 npm에 공식 릴리스되었으며, 이전 버전에 비해 많은 기능들이 변경되거나 새롭게 추가되었습니다.

---

### 지원 중단 및 변경된 기능

* **배열 스키마의 `.nonempty()`**:
    * **Zod 3**: 배열의 최소 길이를 지정하기 위해 사용되었습니다.
    * **Zod 4**: 삭제되었습니다. 대신 `z.array(T).min(1)`을 사용해야 합니다.
* **`.passthrough()` 및 `.strip()`**:
    * **Zod 3**: 알 수 없는 키를 처리하는 데 사용되었습니다.
    * **Zod 4**: 삭제되었습니다. 대신 `z.strictObject()` 또는 `z.catchall()`을 사용하는 것이 권장됩니다.
* **`.refine()`의 타입 변경**:
    * **Zod 3**: `z.refine`이 `ZodType<unknown>`을 반환했습니다.
    * **Zod 4**: 더 이상 `z.refine`이 `ZodType<unknown>`을 반환하지 않습니다. 이제 타입이 더 명확하게 추론됩니다.
* **`.enum()`의 타입 변경**:
    * **Zod 3**: `z.enum()`은 `ZodEnum` 타입을 반환했습니다.
    * **Zod 4**: `z.enum()`은 이제 `ZodUnion` 타입을 반환합니다. 이로 인해 타입 추론 방식이 변경되었으며, `z.nativeEnum`을 사용하지 않는 경우에도 더 유연한 타입을 얻을 수 있습니다.

---

### 새롭게 추가된 기능

* **`.prefault()`**:
    * 이 메서드는 스키마의 기본값을 지정하는 새로운 방법입니다. 예를 들어, `z.string().prefault('hello')`와 같이 사용합니다. 이 기능은 `z.default()`와 비슷하지만, 유효성 검사 단계 전에 기본값을 적용합니다.
* **`.z.strictObject()`**:
    * `z.strictObject()`는 정의되지 않은 추가 키가 포함된 객체를 거부하는 엄격한 객체 스키마를 생성합니다. Zod 3의 `.strip()`와 유사한 역할을 하지만, 더 명확한 의미를 갖도록 이름이 변경되었습니다.
* **`.catchall()`**:
    * `z.catchall()`은 스키마에 정의되지 않은 키에 대해 특정 타입을 허용할 때 사용됩니다. 예를 들어, `z.object({ a: z.string() }).catchall(z.number())`는 'a'라는 키는 문자열 타입이어야 하지만, 그 외의 다른 모든 키는 숫자 타입이어야 함을 명시합니다.
* **`.pipe()`**:
    * `z.pipe()`는 여러 유효성 검사 스키마를 연결하여 순차적으로 실행할 수 있게 해주는 새로운 메서드입니다. 이는 복잡한 변환 및 유효성 검사 로직을 구성할 때 매우 유용합니다.