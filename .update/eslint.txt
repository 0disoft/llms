### ESLint의 진화: 2024년 8월 ~ 2025년 8월 기능 및 지원 중단 사항 종합 검토 보고서

2024년 8월부터 2025년 8월까지의 기간은 **ESLint v9.x**가 "플랫 설정" 시스템으로의 근본적인 전환을 시작하며 성숙기에 접어든 시기입니다. 이 보고서는 이 기간 동안의 ESLint 기능 변화를 상세히 분석하여, 개발자가 린팅 환경을 효과적으로 관리하고 최신 도구 발전을 활용하는 데 필요한 정보를 제공합니다.

---

### 1. 주요 지원 중단 및 제거 사항

ESLint는 v9.0.0에서 아키텍처를 재정비하며 기존 설정 시스템과 일부 기능을 제거했습니다. 이러한 변화는 ESLint의 핵심 임무를 **스타일 린팅에서 의미론적 코드 품질 분석으로 전환**하려는 전략적 결정을 반영합니다.

* **설정 시스템 변경**:
    * 기존의 `.eslintrc` 파일 및 `package.json`의 `eslintConfig` 속성 사용이 **지원 중단**되었습니다.
    * 이제 **"플랫 설정"** 방식인 `eslint.config.js`가 기본 설정 시스템이 됩니다.
* **핵심 규칙 및 포매터 제거**:
    * `valid-jsdoc`, `require-jsdoc` 규칙과 `checkstyle`, `compact` 등 **대부분의 포매터**가 핵심에서 제거되었습니다. 이는 포매팅 책임을 Prettier와 같은 전용 도구에 맡기려는 의도입니다.
* **Node.js 버전 지원 업데이트**:
    * ESLint v9.x는 **Node.js v18.18.0 미만 및 v19.x** 버전에 대한 지원을 중단했습니다.
* **플러그인 API 변경**:
    * 함수형 규칙은 더 이상 지원되지 않고, `meta.schema` 속성을 가진 **객체 형식의 규칙만 지원**합니다.

---

### 2. 새롭게 도입된 기능 및 개선 사항

ESLint는 새로운 v9 아키텍처를 기반으로 타입스크립트 지원을 강화하고, 최신 ECMAScript 기능을 빠르게 통합하며, 개발자 경험을 개선했습니다.

* **핵심 언어 및 구문 지원**:
    * **ECMAScript 2025/2026**의 `Import Attributes`, `Regular Expression Pattern Modifiers`, `명시적 리소스 관리(using, await using)` 등 최신 언어 기능에 대한 지원을 빠르게 통합했습니다.
* **핵심 규칙의 타입스크립트 통합**:
    * `class-methods-use-this`, `init-declarations`, `no-useless-constructor` 등 **많은 핵심 규칙**들이 타입스크립트 구문을 지원하도록 업데이트되었습니다. 이는 기본적인 타입스크립트 린팅을 위해 `@typescript-eslint/parser`에만 의존하는 것을 줄여줍니다.
* **설정 및 CLI 개선**:
    * **`defineConfig()` 및 `globalIgnores()` 헬퍼**가 도입되어 플랫 설정을 더 쉽게 구성하고 타입 안전성을 높였습니다.
    * **`--ext` CLI 옵션**이 재도입되어 설정 파일 없이도 특정 파일 확장자를 린트할 수 있게 되었습니다.
    * **대량 억제(`--suppress-all`)** 기능이 추가되어 기존 위반 사항을 수정하지 않고도 새로운 규칙을 활성화할 수 있습니다.
* **개발자 경험 최적화**:
    * **V8 코드 캐시**를 활용하여 CLI 성능을 높였습니다.
    * **`no-unused-vars`**와 같은 규칙에 변수 제거를 위한 **자동 수정 제안**이 추가되었습니다.

---

### 3. 개발자를 위한 권장 사항

ESLint v9.x로의 마이그레이션은 상당한 노력이 필요하지만, 장기적으로 더 견고하고 효율적인 코드베이스를 구축할 수 있는 기회를 제공합니다.

* **마이그레이션 우선순위 지정**:
    * **Node.js 환경을 v18.18.0 이상으로 업데이트**하고, 기존 `.eslintrc` 설정을 `eslint.config.js`로 변환하는 것을 최우선으로 하세요. 공식 마이그레이션 도구인 `npx @eslint/migrate-config`가 시작점을 제공할 수 있습니다.
* **새로운 기능 활용**:
    * `defineConfig()` 헬퍼를 활용하여 타입 안전한 플랫 설정을 구성하고, 새로운 CLI 기능(`--ext`, 대량 억제)을 통해 워크플로를 간소화하세요.
    * **`@typescript-eslint` 플러그인**과 더불어 ESLint의 강화된 핵심 규칙을 활용하여 타입스크립트 코드의 품질을 높이세요.
* **린팅 책임 분리**:
    * ESLint는 의미론적 린팅에, Prettier와 같은 전용 포매터는 스타일 포매팅에 집중하여 **도구 간의 역할 충돌**을 방지하고 워크플로를 최적화하세요.