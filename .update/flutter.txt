### Flutter 기능 지원 현황 및 신규 기능 분석 보고서 (2024년 8월 ~ 2025년 8월)

2024년 8월부터 2025년 8월까지는 Flutter 및 Dart 생태계에 중요한 변화가 있었던 시기입니다. Flutter는 여러 안정화 버전을 출시하며 핵심 기능들을 고도화했고, 특히 **Impeller 렌더링 엔진 기본화**, **플랫폼 상호 운용성 강화**, **AI/ML 통합**에 중점을 두었습니다.

---

### 1. 주요 신규 기능 및 개선 사항

#### 1.1. 핵심 프레임워크 업데이트
- **Impeller 렌더링 엔진 기본화**: Flutter 3.27부터 Impeller가 iOS와 Android의 기본 렌더링 엔진으로 지정되었습니다. 이후 버전(3.29, 3.32)에서는 Impeller의 성능과 시각적 충실도가 지속적으로 개선되어 더 부드러운 애니메이션과 선명한 텍스트 렌더링을 제공합니다.
- **플랫폼 상호 운용성 강화**: Flutter 3.29부터 Android 및 iOS에서 Dart 코드가 애플리케이션의 **메인 스레드**에서 실행되도록 변경되었습니다. 이는 네이티브 플랫폼과의 동기식 호출을 가능하게 하여 상호 운용성 오버헤드를 줄입니다.
- **데스크톱 및 웹 지원 강화**: 데스크톱 애플리케이션을 위한 향상된 다중 창 지원이 도입되었고, 웹용 실험적 핫 리로드가 추가되어 개발 효율성을 높였습니다.

#### 1.2. UI 구성 요소 업데이트
- **Material Design 3 업데이트**: CircularProgressIndicator, Slider 등 여러 위젯이 최신 Material Design 3 사양에 맞춰 업데이트되었습니다.
- **Cupertino 위젯 개선**: iOS 디자인 가이드라인에 맞춰 `CupertinoSheetRoute` 및 `CupertinoNavigationBar.large`와 같은 위젯이 개선되었습니다. `CupertinoAlertDialog`에는 네이티브 모양에 가까운 "squircles"가 적용되었습니다.
- **새로운 위젯**: `Expansible` (확장/축소 UI) 및 `RawMenuAnchor` (사용자 정의 메뉴)와 같은 새로운 핵심 위젯이 도입되어, 다양한 디자인 시스템에서 위젯을 재사용하기 쉽게 만들었습니다.

#### 1.3. Dart 언어 및 도구 업데이트
- **새로운 언어 기능**: Dart 3.7에서 `wildcard variables`, Dart 3.8에서 `컬렉션 요소(if, for, spread)`와 같은 기능이 추가되어 언어의 표현력이 향상되었습니다.
- **`pub` 시스템 개선**: `pub workspaces`와 `pub bump` 명령어가 추가되어 복잡한 모노레포 프로젝트의 패키지 관리를 간소화했습니다.
- **AI/ML 통합**: **`firebase_ai`** 패키지가 포함되어 **Gemini** 및 **Imagen** AI 모델을 Flutter 앱에 직접 통합하는 것이 쉬워졌습니다.

---

### 2. 지원 중단된 기능 및 주요 변경 사항

Flutter는 코드베이스를 현대화하기 위해 오래된 API와 기능들을 단계적으로 폐지했습니다.

- **API 지원 중단 및 제거**:
  - `ButtonBar` 위젯이 지원 중단되고 `OverflowBar`가 권장되었습니다.
  - `v1 Android 임베딩 Java API`가 제거되었습니다.
  - `ExpansionTileController`가 지원 중단되고 `ExpansibleController`로 대체되었습니다.
- **기본 동작 변경**:
  - `Impeller`가 iOS 및 Android의 기본 렌더링 엔진으로 설정되었습니다.
  - `Material 3` 위젯 업데이트로 인해 일부 위젯의 기본 시각적 디자인이 변경되었습니다.
- **Dart 라이브러리 제거**: 공식적으로 지원이 중단된 **`dart:html`** 라이브러리 페이지와 실험적 매크로 문서가 제거되었습니다.

---

### 3. 결론 및 권장 사항

이 기간 동안의 Flutter 및 Dart의 발전은 **성능, 네이티브 충실도, AI/ML 통합**에 대한 강력한 의지를 보여줍니다. 개발자는 이러한 변화를 적극적으로 수용하여 애플리케이션의 경쟁력을 확보해야 합니다.

- **적극적인 업그레이드**: 성능 향상 및 보안 패치를 위해 Flutter 및 Dart 버전을 정기적으로 업그레이드하는 주기를 설정하세요.
- **새로운 기능 활용**: **AI/ML 통합**이나 **향상된 데스크톱 기능**과 같은 새로운 패러다임을 적극적으로 탐색하여 혁신적인 애플리케이션을 개발하세요.
- **마이그레이션 계획 수립**: 지원 중단된 API를 미리 확인하고, `Impeller` 및 `Material 3` 기본값 변경으로 인한 시각적 변화에 대비하여 철저한 테스트를 진행하세요.