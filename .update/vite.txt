### Vite 프레임워크 기능 변화 보고서 (2024년 8월 ~ 2025년 8월)

2024년 8월부터 2025년 8월까지의 기간은 Vite 프레임워크의 중요한 전환점입니다. 이 시기는 **Vite 6**와 **Vite 7**의 출시로 특징지어지며, Vite는 **Rust 기반 툴링 통합**을 통한 코어 현대화와 **다양한 런타임 환경 지원**을 위한 미래 기반을 마련했습니다.

---

### 1. Vite 6: 혁신 및 개선 (2024년 11월 릴리스)

Vite 6는 개발자 경험을 간소화하고 성능을 향상시키는 데 중점을 두었습니다.

* **스마트 HMR(Hot Module Replacement)**: HMR 엔진이 최적화되어 재빌드 시간을 단축하고 중첩된 컴포넌트 상태까지 보존합니다.
* **WebAssembly(WASM) 및 Rust 툴링 통합**: WASM 모듈에 대한 기본 지원과 Rust 툴링 통합이 간소화되어 고성능 웹 애플리케이션 개발이 용이해졌습니다.
* **실험적 환경 API**: Deno, Bun, Workerd 등 Node.js 이외의 런타임 환경을 지원하기 위한 실험적인 API가 도입되었습니다. 이는 Vite의 적용 범위를 서버리스 엣지 환경으로 확장합니다.
* **지원 중단/변경 사항**:
    * 레거시 브라우저 지원이 중단되어 Vite가 최신 웹 표준을 완전히 활용할 수 있게 되었습니다.
    * 설정 파일 구조가 가독성과 유지보수성을 위해 통합되었습니다.

---

### 2. Vite 7: 코어 현대화 및 미래 기반 (2025년 6월 릴리스)

Vite 7은 Vite의 성능과 개발자 경험을 더욱 발전시키기 위한 핵심적인 호환성 변경과 개선 사항을 도입했습니다.

* **`Rolldown` 통합 (실험적)**: esbuild와 Rollup을 대체할 Rust 기반의 차세대 번들러 `Rolldown`이 통합되었습니다. Rolldown은 빌드 시간을 획기적으로 단축시키고 개발 및 프로덕션 빌드 프로세스를 통합하여 **개발/프로덕션 불일치** 문제를 해결합니다.
* **Vite DevTools 도입**: VoidZero와 NuxtLabs의 파트너십을 통해 개발 중인 `Vite DevTools`는 더 깊고 통찰력 있는 디버깅 및 분석 기능을 제공할 것입니다.
* **지원 중단/변경 사항**:
    * **Node.js 18 지원 중단**: Node.js 18이 EOL(End-of-Life)에 도달함에 따라 지원이 중단되었으며, Vite 7은 **Node.js 20.19+ 또는 22.12+**를 요구합니다.
    * **기본 브라우저 대상 변경**: 기본 `build.target`이 `'modules'`에서 `'baseline-widely-available'`로 변경되어, 널리 지원되는 웹 표준에 집중하고 불필요한 트랜스파일링을 줄입니다.
    * `Sass` 레거시 API 지원이 제거되었고, `splitVendorChunkPlugin`이 제거되는 등 여러 내부 API가 정리되었습니다.

---

### 3. 개발자를 위한 영향 및 마이그레이션 지침

Vite 6와 7의 변화는 상당한 이점을 제공하지만, 마이그레이션 노력을 요구합니다.

* **Node.js 환경 업데이트**: Vite 7로 마이그레이션하기 전에 Node.js 환경을 **버전 20.19+ 이상**으로 업그레이드해야 합니다.
* **`Rolldown` 실험**: 빌드 성능에 병목 현상이 있는 대규모 프로젝트의 경우 `rolldown-vite`를 실험적으로 사용하여 성능 향상을 경험해 볼 수 있습니다.
* **브라우저 호환성 조정**: 구형 브라우저를 지원해야 하는 경우, `@vitejs/plugin-legacy`를 명시적으로 사용하여 적절한 트랜스파일링 및 폴리필링을 보장해야 합니다.
* **마이그레이션 도구 활용**: 각 주요 버전에 대한 **공식 마이그레이션 가이드**를 참조하고, `splitVendorChunkPlugin`과 같은 제거된 플러그인에 대한 대안(`build.rollupOptions.output.manualChunks`)을 적용해야 합니다.
* **생태계 수용**: Vite DevTools, Vitest 등 Vite의 확장되는 툴링 생태계를 적극적으로 활용하여 개발 워크플로를 최적화하세요.