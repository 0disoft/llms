### Tailwind CSS v4.0: 기능 변경 및 지원 종료 보고서

Tailwind CSS v4.0은 프레임워크의 성능과 유연성을 최적화하기 위해 처음부터 다시 작성된 완전히 새로운 버전입니다. 2024년 11월 21일에 첫 번째 공개 베타 버전이 출시된 이래, **v4.0과 v4.1**은 아키텍처 재구성, 재정의된 설정 시스템, 그리고 최신 웹 플랫폼 기능의 적극적인 활용에 중점을 두며 프레임워크의 근본적인 변화를 가져왔습니다.

---

### 1. 주요 변경 사항 및 개선점

Tailwind CSS v4는 **새로운 고성능 엔진(Oxide)**을 도입하고, **`tailwind.config.js` 파일을 제거**하는 등 기존의 방식을 뒤흔드는 변화를 단행했습니다.

#### 1.1. 성능 및 설정 시스템
* **새로운 엔진(Oxide)**: 완전히 새로운 고성능 엔진 `Oxide`가 도입되어 전체 빌드 시간을 **최대 5배**, 증분 빌드는 **100배 이상** 빠르게 만들었습니다. 이는 개발 워크플로를 획기적으로 가속화합니다.
* **`CSS-First` 설정**: `tailwind.config.js` 파일이 더 이상 필요 없어지고, `@theme` 지시문을 사용하여 CSS 파일 내에서 직접 디자인 토큰과 유틸리티를 구성하는 "CSS-First" 접근 방식을 채택했습니다.
* **간소화된 설치**: `postcss-import` 및 `autoprefixer`와 같은 외부 PostCSS 플러그인이 더 이상 필요하지 않습니다. Tailwind CSS 자체적으로 이 기능들을 처리합니다.

#### 1.2. 현대 웹 플랫폼 기능 활용
* `@property`, `color-mix()`, `캐스케이드 레이어`와 같은 최신 CSS 기능을 적극적으로 활용하여 더 강력한 디자인 제어를 제공합니다. 이는 프레임워크가 자체적인 추상화 계층을 줄이고 웹 표준에 의존하려는 전략적 움직임을 보여줍니다.
* **브라우저 호환성 요구 사항**: `v4.0`은 **Safari 16.4, Chrome 111, Firefox 128 이상**을 필요로 합니다. 최신 CSS 기능을 사용하기 때문에 구형 브라우저에서는 작동하지 않습니다.

#### 1.3. 새로운 유틸리티 및 변형
* **컨테이너 쿼리**: 플러그인 없이 컨테이너 크기에 따라 요소를 스타일링할 수 있는 일류 API가 도입되었습니다.
* **3D 변환 유틸리티**: HTML에서 직접 요소를 3D 공간으로 변환할 수 있는 새로운 유틸리티가 추가되었습니다.
* **`not-*` 변형**: 다른 변형과 일치하지 않을 때만 요소를 스타일링하는 새로운 변형이 추가되어 조건부 스타일링을 더욱 유연하게 만듭니다.
* **텍스트 그림자 및 마스크**: `v4.1`에서 `text-shadow-*` 및 `mask-*`와 같은 유틸리티가 추가되어, 더 풍부하고 표현력 있는 UI를 구축할 수 있는 도구를 제공합니다.

---

### 2. 지원 종료 및 변경된 유틸리티

Tailwind CSS v4.0은 마이그레이션이 필요한 중요한 유틸리티 변경 사항들을 포함합니다.

* **유틸리티 이름 변경**: `shadow`, `drop-shadow`, `blur` 유틸리티의 접미사 스케일이 업데이트되었습니다.
    * `shadow-sm` → **`shadow-xs`**
    * `shadow` → **`shadow-sm`**
* **`outline` 유틸리티**: `outline-none`의 동작이 변경되었고, 이전의 동작(보이지 않는 아웃라인)은 **`outline-hidden`**으로 대체되었습니다.
* **`ring` 너비**: `ring` 유틸리티의 기본 너비가 `3px`에서 **`1px`**로 변경되었습니다.
* **`border-*` 및 `divide-*` 기본 색상**: `border-*` 및 `divide-*` 유틸리티의 기본 테두리 색상이 `gray-200`에서 **`currentColor`**로 변경되었습니다. 이제 색상을 명시적으로 지정해야 합니다.

---

### 3. 마이그레이션 고려 사항 및 권장 사항

Tailwind CSS v4.0으로의 업그레이드는 기존 프로젝트에 상당한 노력을 요구하지만, 성능과 유연성 측면에서 큰 이점을 제공합니다.

#### 마이그레이션 가이드
1.  **공식 마이그레이션 도구 활용**: **`npx @tailwindcss/upgrade`**와 같은 공식 마이그레이션 도구를 사용하여 프로세스를 간소화하세요.
2.  **설정 파일 전환**: JavaScript 기반의 `tailwind.config.js`를 **CSS 파일 내의 `@theme` 지시문**으로 전환하는 것을 이해하고 적용하세요.
3.  **코드베이스 업데이트**: 유틸리티 이름 변경(`shadow-sm` → `shadow-xs`) 및 동작 변경(`outline-none`)에 맞춰 코드베이스를 업데이트하세요.
4.  **브라우저 호환성 검토**: 프로젝트의 대상 브라우저가 v4.0의 요구 사항을 충족하는지 확인하세요.

#### 권장 사항
- **소규모 프로젝트에서 먼저 실험**: 대규모 프로젝트에 바로 적용하기 전에, 소규모 프로젝트에서 새로운 개념과 변경된 유틸리티에 익숙해지는 것을 추천합니다.
- **점진적 마이그레이션**: 전체 프로젝트를 한 번에 마이그레이션하기보다, 컴포넌트나 섹션별로 점진적으로 마이그레이션하는 전략을 고려하세요.
- **문서 및 커뮤니티 활용**: 공식 문서를 철저히 숙지하고, 커뮤니티 채널을 활용하여 문제 해결에 필요한 지원과 통찰력을 얻으세요.