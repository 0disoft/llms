### Go 언어: 2024년 8월 ~ 2025년 8월 주요 기능 변화 및 지원 종료 기능 분석 보고서

Go 언어는 예측 가능한 6개월 릴리스 주기를 통해 꾸준히 발전해왔습니다. 2024년 8월부터 2025년 8월까지의 기간은 Go **1.23** 및 Go **1.24**의 출시를 포함하며, 이 보고서는 이 두 버전에서 도입된 핵심 변화를 분석합니다.

---

### 1. Go 1.23: 주요 변경 사항 (2024년 8월 출시)

Go 1.23은 런타임, 표준 라이브러리, 도구 전반에 걸쳐 효율성과 견고성을 향상시키는 데 초점을 맞췄습니다.

* **타이머 효율성 개선**: `time.Timer` 및 `time.Ticker`의 채널이 이제 버퍼링되지 않으며(`용량 0`), 미사용 타이머는 즉시 가비지 컬렉션(GC) 대상이 됩니다. 이는 타이머의 예측 가능성과 자원 관리 효율성을 높입니다.
* **새로운 표준 라이브러리 패키지**: `iter` (이터레이터), `structs` (구조체 속성 제어), `unique` (값 정규화) 패키지가 추가되어 코드 효율성 및 가독성을 높입니다.
* **보안 강화**: `crypto/tls`의 기본 암호화 스위트 목록에서 **취약한 `3DES` 암호화 스위트가 제거**되었습니다.
* **성능 최적화**: PGO(프로파일 가이드 최적화) 오버헤드가 대폭 감소하고, 컴파일러가 스택 프레임을 최적화하여 스택 사용량을 줄였습니다.

---

### 2. Go 1.24: 주요 변경 사항 (2025년 2월 출시)

Go 1.24는 언어의 표현력을 확장하고, 도구 체계를 강화하며, 런타임 성능을 극대화하는 데 중점을 두었습니다.

* **언어 기능**:
    * **제네릭 타입 별칭**: 타입 별칭이 제네릭으로 매개변수화될 수 있도록 완전히 지원됩니다. 이는 복잡한 타입 정의를 더 유연하고 간결하게 만듭니다.
* **도구 체계 개선**:
    * **`tool` 지시어**: `go.mod` 파일에서 린터나 코드 생성기와 같은 실행 가능 종속성을 공식적으로 추적할 수 있게 되었습니다. 이는 "tools.go"와 같은 임시 해결책을 대체합니다.
    * **`go build -json`**: `go build` 명령이 빌드 출력을 구조화된 JSON으로 보고할 수 있게 되어, CI/CD 파이프라인과의 통합이 용이해졌습니다.
* **런타임 성능**:
    * **Swiss Tables 기반 `map` 구현**: 새로운 `map` 구현을 통해 `map`의 접근 및 할당 성능이 대폭 향상되었습니다.
    * **`runtime.AddCleanup`**: `runtime.SetFinalizer`보다 더 안전하고 효율적인 객체 종료 메커니즘이 도입되었습니다.
* **강력한 암호화**:
    * **양자 내성 암호화**: `crypto/mlkem` 패키지를 통해 **ML-KEM**과 같은 양자 내성 키 교환 메커니즘을 지원합니다.
    * **`FIPS 140-3` 준수**: FIPS 140-3 준수 메커니즘을 추가하여 규제 산업의 요구사항을 충족합니다.

---

### 3. 지원 중단 및 호환성 변경

* **`GOROOT_FINAL` 환경 변수 제거**: 더 이상 효과가 없으며, 대신 `go` 바이너리를 심볼릭 링크로 설치해야 합니다.
* **`time.Timer` 채널 동작 변경**: `time.Timer` 채널이 버퍼링되지 않으므로, `len`/`cap`을 통한 비차단 검사를 사용하던 기존 코드는 수정이 필요합니다.
* **`x509sha1` GODEBUG 제거**: `crypto/x509`가 **SHA-1 기반 서명을 더 이상 지원하지 않습니다**.
* **`crypto/rsa` 키 크기 강제**: `1024비트 미만`의 RSA 키 생성 또는 사용 시 오류를 반환하도록 변경되었습니다.
* **OS 버전 요구 사항 증가**: **Go 1.24**부터 Linux 커널 `3.2 이상`이 필요하며, **Go 1.25**부터 macOS `12 Monterey 이상`이 필요합니다.

---

### 4. 결론 및 권장 사항

Go 1.23과 1.24는 성능, 보안, 그리고 개발자 경험을 향상시키려는 Go의 노력을 명확히 보여줍니다. 개발자들은 다음과 같은 권장 사항을 고려하여 업그레이드를 계획해야 합니다.

1.  **점진적 업그레이드**: Go 1.23을 먼저 적용하여 변경 사항을 처리한 후, Go 1.24로 진행하는 단계별 업그레이드 전략을 사용하세요.
2.  **보안 감사**: SHA-1 서명 및 1024비트 미만 RSA 키 사용 여부를 감사하고, 더 강력한 암호화 알고리즘으로 마이그레이션하세요.
3.  **새로운 도구 활용**: `tool` 지시어를 활용하여 프로젝트별 도구를 체계적으로 관리하고, `testing/synctest`를 통해 동시성 코드를 테스트하세요.
4.  **마이그레이션 도구 활용**: `go vet`와 같은 정적 분석 도구를 사용하여 호환성 변경의 영향을 받는 코드 패턴을 식별하세요.