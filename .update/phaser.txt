### Phaser 프레임워크 기능 변화 보고서 (2024년 8월 ~ 2025년 8월)

2024년 8월부터 2025년 8월까지는 **Phaser 3.x**의 꾸준한 발전과 **Phaser 4.x**의 베타 및 릴리스 후보 단계가 공존했던 중요한 기간입니다. 이 시기 동안 Phaser는 성능 최적화, 아키텍처 재구성, 그리고 개발자 도구의 강화를 통해 게임 개발 환경을 혁신했습니다.

---

### 1. Phaser 3.x: 지속적인 진화

Phaser 3.x 버전은 안정성과 하위 호환성을 유지하면서도, 성능과 개발 편의성을 높이는 기능들을 지속적으로 추가하고 개선했습니다.

* **Matter.js v0.20.0 통합**: 물리 엔진인 **Matter.js**가 업데이트되어 고정 타임스텝, 서브-스테핑 지원 등 성능과 메모리 효율성이 크게 향상되었습니다.
* **FontFile 로더**: TTF/OTF 폰트를 직접 로드할 수 있는 새로운 로더가 추가되어 서드파티 도구 없이도 폰트 사용이 가능해졌습니다.
* **렌더링 및 텍스처 개선**: 모바일에서 발생하던 렌더 텍스처 메모리 부족 오류를 해결하고, `DynamicTexture` 및 `RenderTexture`에 `forceEven` 속성을 추가하여 렌더링 품질을 개선했습니다.
* **새로운 기능**: 둥근 사각형을 만들 수 있는 `setRounded()` 메서드와 각도 계산을 위한 새로운 수학 함수(`GetClockwiseDistance()`, `GetShortestDistance()`)가 추가되었습니다.

**지원 종료/변경 사항**: 이 기간 동안 Phaser 3.x에서 명시적으로 제거되거나 지원이 종료된 기능은 없습니다. 다만, `DynamicTexture`의 `forceEven` 속성(기본값 `true`)과 같이 홀수 크기 텍스처에 의존하는 경우 호환성 문제가 발생할 수 있는 변경 사항은 있었습니다.

---

### 2. Phaser 4.x: 차세대 아키텍처와 성능 혁신

Phaser 4.x는 점진적인 개선을 넘어선 근본적인 아키텍처 재구성을 통해 모바일 환경의 성능을 획기적으로 개선했습니다.

* **카메라 시스템 재작성**: **Phaser 4.0.0 Beta 7**에서 카메라 시스템이 재작성되었습니다. 뷰와 위치를 별도의 행렬로 분리하여 중첩된 변환, 필터 등과 관련된 문제를 해결하고 렌더링 파이프라인을 견고하게 만들었습니다.
* **대규모 모바일 성능 향상**: **Phaser 4.0.0 Release Candidate 4**에서는 데이터 버퍼 관리의 개편을 통해 모바일 기기에서 **최대 16배의 성능 향상**과 16MB 이상의 메모리 절감을 달성했습니다.
* **`TileSprite` 텍스처 자르기 제거**: 렌더링 시스템을 간소화하기 위해 `TileSprite`의 텍스처 자르기 기능이 제거되었습니다.

---

### 3. Phaser Editor: 개발 워크플로우 개선

시각적 개발 환경인 **Phaser Editor**도 프레임워크의 진화에 맞춰 개발자 경험을 향상시켰습니다.

* **네트워크 프록시 지원**: 기업 환경에서도 에디터를 사용할 수 있도록 네트워크 프록시 지원이 추가되었습니다.
* **멀티미디어 지원**: 비디오 게임 객체 지원과 비디오 및 오디오 미리보기 기능이 통합되어 멀티미디어 콘텐츠 관리가 간편해졌습니다.
* **애니메이션 미리보기**: 게임을 실행하지 않고도 씬 내에서 스프라이트 애니메이션을 미리 볼 수 있는 기능이 추가되어 시각적 디버깅이 용이해졌습니다.
* **Phaser 3.87 기능 지원**: 에디터가 폰트 로더와 같은 Phaser 3.87의 신규 기능을 즉시 지원하여 프레임워크와의 통합성을 높였습니다.

---

### 4. 개발자를 위한 권장 사항

Phaser 3.x와 4.x의 동시 개발은 개발자들에게 전략적인 선택을 요구합니다.

* **신규 프로젝트**:
    * **안정성 우선**: 빠른 개발과 안정성이 중요하다면, 최신 **Phaser 3.x(현재 v3.90.0)**를 사용하는 것이 좋습니다.
    * **성능 우선**: 모바일 성능과 미래 대비가 중요하다면, **Phaser 4.x Release Candidate 4**를 철저히 평가하고 새로운 아키텍처에 적응할 준비를 해야 합니다.
* **기존 프로젝트**:
    * **3.x 업그레이드**: 주요 리팩토링 없이도 성능 개선의 이점을 얻기 위해 최신 Phaser 3.x 버전으로 정기적으로 업그레이드하세요.
    * **4.x 마이그레이션**: Phaser 4.x로의 마이그레이션은 간단한 업그레이드가 아니므로, **카메라 로직이나 `TileSprite` 자르기**와 같은 호환성 문제를 미리 파악하고 신중하게 계획해야 합니다.
* **도구 활용**: **Phaser Editor**를 활용하여 에셋 관리, 씬 생성, 애니메이션 미리보기 등 개발 워크플로우를 간소화하세요.