### pnpm의 발전: 주요 기능 및 변경 사항 (2024년 8월 ~ 2025년 8월)

2024년 8월부터 2025년 8월까지는 pnpm의 발전에 있어 매우 중요한 시기였습니다. 이 기간은 **pnpm v10.x**의 출시를 중심으로, 기존의 강점인 속도와 효율성에 **강력한 보안 및 개발자 제어 기능**을 추가하며 pnpm을 더욱 성숙한 패키지 관리자로 만들었습니다.

---

### 1. 주요 변경 사항 및 지원 중단

pnpm v10.x는 보안과 일관성 강화를 위해 기존 워크플로에 영향을 미치는 중요한 변경 사항들을 도입했습니다.

* **라이프사이클 스크립트 기본 차단**: pnpm v10.0.0부터 **보안상의 이유로 종속성의 라이프사이클 스크립트(`preinstall`, `install` 등)가 기본적으로 실행되지 않습니다.** 악성 코드 실행을 막기 위한 조치이며, 필요한 경우 **`pnpm.onlyBuiltDependencies`**에 명시적으로 허용해야 합니다.
* **`pnpm link` 동작 변경**: `pnpm link` 명령은 이제 패키지 디렉터리에서 실행될 때 기본적으로 전역 패키지를 생성합니다.
* **`public-hoist-pattern` 기본값 변경**: 이전에는 특정 패키지(`eslint`, `prettier`)가 자동으로 `node_modules` 루트로 호이스팅되었지만, 이제는 기본적으로 아무것도 호이스팅되지 않습니다. 이는 **명시적인 종속성 관리**를 장려합니다.
* **해싱 알고리즘 업데이트**: 보안과 일관성을 위해 모든 내부 해싱 알고리즘이 **MD5에서 SHA256으로 업데이트**되었습니다.
* **기타 변경 사항**:
    * `pnpm self-update`를 통해 pnpm을 업데이트하도록 안내하는 오류 메시지가 추가되었습니다.
    * `pnpm test`가 `--` 접두사 없이도 인자를 직접 전달하도록 변경되었습니다.
    * `pnpm-lock.yaml`의 v6에서 v9로의 자동 변환 기능이 제거되었습니다.

---

### 2. 새로 도입된 기능 및 개선 사항

pnpm은 모노레포 관리와 개발 워크플로 효율성을 높이는 다양한 기능들을 새롭게 추가했습니다.

* **JavaScript 런타임 설치 지원**: `package.json`에 `devEngines.runtime` 필드를 추가하여 **Node.js, Deno, Bun 런타임을 선언하고 자동 설치**할 수 있게 되었습니다. 이는 모든 개발 환경에 걸쳐 런타임 버전을 일관되게 유지하는 데 큰 도움이 됩니다.
* **고급 아키텍처 사용자 정의**: `pnpm install`에 `--cpu`, `--libc`, `--os`와 같은 플래그가 추가되어, 교차 컴파일과 같이 특정 아키텍처에 대한 종속성을 명시적으로 설치할 수 있게 되었습니다.
* **카탈로그 프로토콜 통합**: **`pnpm-workspace.yaml`**에 카탈로그를 정의하여 워크스페이스 전반의 종속성 버전을 중앙에서 관리하고 업그레이드를 간소화할 수 있습니다.
* **실험적인 전역 가상 저장소**: `enableGlobalVirtualStore` 설정을 통해 모든 프로젝트가 하나의 중앙 가상 저장소를 공유하여 디스크 공간 효율성과 설치 속도를 더욱 높이는 실험적 기능이 도입되었습니다.
* **pnpm audit 개선**: `pnpm audit` 명령어에 `--ignore` 및 `--ignore-unfixable` 플래그가 추가되어 취약점 보고서 관리가 용이해졌습니다.

---

### 3. 개발자 및 DevOps 팀에 대한 시사점

pnpm v10.x는 단순한 버전 업그레이드를 넘어, **적극적이고 구조화된 마이그레이션 전략**을 필요로 합니다.

* **마이그레이션 계획**:
    * **종속성 감사**: `package.json`을 감사하여 라이프사이클 스크립트에 의존하는 종속성을 식별하고 `pnpm.onlyBuiltDependencies`에 추가하세요.
    * **CI/CD 업데이트**: `pnpm deploy`와 `pnpm test`의 변경된 동작에 맞춰 CI/CD 스크립트를 업데이트해야 합니다.
    * **락파일 재생성**: SHA256 해싱 업데이트로 인해 `pnpm-lock.yaml` 파일이 변경될 것이므로, 업그레이드 후 락파일을 재생성하고 커밋해야 합니다.
* **보안 강화**: 라이프사이클 스크립트의 기본 차단은 공급망 공격 위험을 줄이는 중요한 보안 기능입니다. `pnpm audit`을 활용하여 취약점을 적극적으로 관리하는 모범 사례를 채택하세요.
* **효율성 향상**: `devEngines.runtime`, **카탈로그 프로토콜**과 같은 새로운 기능을 활용하여 모노레포 관리, 런타임 일관성, 그리고 설치 성능을 최적화하세요.